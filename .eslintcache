[{"D:\\work\\TDW-Framework\\src\\index.tsx":"1","D:\\work\\TDW-Framework\\src\\redux\\store.ts":"2","D:\\work\\TDW-Framework\\src\\App.tsx":"3","D:\\work\\TDW-Framework\\src\\redux\\reducers\\rootReducer.ts":"4","D:\\work\\TDW-Framework\\src\\theme\\theme.ts":"5","D:\\work\\TDW-Framework\\src\\routes\\routes.tsx":"6","D:\\work\\TDW-Framework\\src\\redux\\reducers\\layoutSlice.ts":"7","D:\\work\\TDW-Framework\\src\\redux\\reducers\\authSlice.ts":"8","D:\\work\\TDW-Framework\\src\\theme\\globalFontSize.ts":"9","D:\\work\\TDW-Framework\\src\\theme\\color.ts":"10","D:\\work\\TDW-Framework\\src\\Utils\\constants\\colors\\colors.ts":"11","D:\\work\\TDW-Framework\\src\\routes\\privateRoutes.tsx":"12","D:\\work\\TDW-Framework\\src\\routes\\publicRoutes.tsx":"13","D:\\work\\TDW-Framework\\src\\routes\\paths.tsx":"14","D:\\work\\TDW-Framework\\src\\Pages\\carComparision\\index.tsx":"15","D:\\work\\TDW-Framework\\src\\Pages\\SearchUsedCars\\index.tsx":"16","D:\\work\\TDW-Framework\\src\\layout\\index.tsx":"17","D:\\work\\TDW-Framework\\src\\Pages\\carsListing\\index.tsx":"18","D:\\work\\TDW-Framework\\src\\Pages\\carDetail\\index.tsx":"19","D:\\work\\TDW-Framework\\src\\Pages\\verificationPage\\index.tsx":"20","D:\\work\\TDW-Framework\\src\\Pages\\login\\index.tsx":"21","D:\\work\\TDW-Framework\\src\\Pages\\home\\index.tsx":"22","D:\\work\\TDW-Framework\\src\\Pages\\AddEditCar\\index.tsx":"23","D:\\work\\TDW-Framework\\src\\Utils\\constants\\language\\en\\buttonLabels.ts":"24","D:\\work\\TDW-Framework\\src\\Utils\\constants\\language\\en\\footerData.ts":"25","D:\\work\\TDW-Framework\\src\\Utils\\constants\\language\\en\\listingData.ts":"26","D:\\work\\TDW-Framework\\src\\layout\\Sections\\Sections\\Header\\Header.tsx":"27","D:\\work\\TDW-Framework\\src\\Utils\\constants\\language\\en\\addEditCarData.ts":"28","D:\\work\\TDW-Framework\\src\\Pages\\AddEditCar\\useAddEditCar.tsx":"29","D:\\work\\TDW-Framework\\src\\Pages\\AddEditCar\\CustomStepperIcon.tsx":"30","D:\\work\\TDW-Framework\\src\\Utils\\themeConstants.tsx":"31","D:\\work\\TDW-Framework\\src\\layout\\Sections\\Sections\\Header\\paths.tsx":"32","D:\\work\\TDW-Framework\\src\\layout\\Sections\\Sections\\Header\\useStyles.tsx":"33","D:\\work\\TDW-Framework\\src\\layout\\Sections\\Utils\\color.constants.tsx":"34","D:\\work\\TDW-Framework\\src\\components\\CustomButton.tsx":"35","D:\\work\\TDW-Framework\\src\\layout\\Sections\\Sections\\Header\\Sidebar\\Sidebar.tsx":"36","D:\\work\\TDW-Framework\\src\\Pages\\AddEditCar\\UploadPhotosForm.tsx":"37","D:\\work\\TDW-Framework\\src\\Pages\\AddEditCar\\CarInformationForm.tsx":"38","D:\\work\\TDW-Framework\\src\\Pages\\AddEditCar\\CarAdditionalInformation.tsx":"39","D:\\work\\TDW-Framework\\src\\Utils\\constants\\formsConstants.ts":"40","D:\\work\\TDW-Framework\\src\\Pages\\carsListing\\useForm.ts":"41","D:\\work\\TDW-Framework\\src\\Utils\\constants\\language\\en\\filtersData.ts":"42","D:\\work\\TDW-Framework\\src\\layout\\Sections\\Sections\\Header\\Sidebar\\sidebarStyles.tsx":"43","D:\\work\\TDW-Framework\\src\\Utils\\Breakpoints.tsx":"44","D:\\work\\TDW-Framework\\src\\components\\CustomTitle\\style.tsx":"45","D:\\work\\TDW-Framework\\src\\layout\\Sections\\Sections\\ListingBanner\\ListBannerContainer.tsx":"46","D:\\work\\TDW-Framework\\src\\Pages\\AddEditCar\\SelectComponent.tsx":"47","D:\\work\\TDW-Framework\\src\\layout\\Sections\\Sections\\Banner\\Banner.tsx":"48","D:\\work\\TDW-Framework\\src\\components\\index.tsx":"49","D:\\work\\TDW-Framework\\src\\components\\ListingBanner\\ListingBannerContext.tsx":"50","D:\\work\\TDW-Framework\\src\\components\\CustomTitle\\CustomTitle.tsx":"51","D:\\work\\TDW-Framework\\src\\layout\\Sections\\Sections\\Banner\\bannerStyles.tsx":"52","D:\\work\\TDW-Framework\\src\\layout\\Sections\\Sections\\Banner\\useHooks.tsx":"53","D:\\work\\TDW-Framework\\src\\components\\SearchSelect\\SearchSelect.tsx":"54","D:\\work\\TDW-Framework\\src\\components\\ListingBanner\\useStyles.tsx":"55","D:\\work\\TDW-Framework\\src\\components\\CustomTitle\\Size.tsx":"56","D:\\work\\TDW-Framework\\src\\components\\SearchSelect\\selectStyles.tsx":"57","D:\\work\\TDW-Framework\\src\\pages\\signup\\SignupWithEmail.tsx":"58","D:\\work\\TDW-Framework\\src\\pages\\signup\\SignupWithMobile.tsx":"59","D:\\work\\TDW-Framework\\src\\pages\\dashboard\\index.tsx":"60","D:\\work\\TDW-Framework\\src\\globalStyles.ts":"61","D:\\work\\TDW-Framework\\src\\pages\\signup\\index.tsx":"62","D:\\work\\TDW-Framework\\src\\pages\\forgetPassword\\index.tsx":"63","D:\\work\\TDW-Framework\\src\\pages\\resetPassword\\index.tsx":"64","D:\\work\\TDW-Framework\\src\\pages\\signup\\useForm.ts":"65","D:\\work\\TDW-Framework\\src\\pages\\postAd\\index.tsx":"66","D:\\work\\TDW-Framework\\src\\sections\\Footer\\index.tsx":"67","D:\\work\\TDW-Framework\\src\\pages\\forgetPassword\\useForm.ts":"68","D:\\work\\TDW-Framework\\src\\pages\\resetPassword\\useForm.ts":"69","D:\\work\\TDW-Framework\\src\\Utils\\regex.ts":"70","D:\\work\\TDW-Framework\\src\\sections\\Footer\\styles.ts":"71","D:\\work\\TDW-Framework\\src\\Utils\\constants\\language\\Text.ts":"72","D:\\work\\TDW-Framework\\src\\components\\InputField\\index.tsx":"73","D:\\work\\TDW-Framework\\src\\components\\InputField\\styles.ts":"74","D:\\work\\TDW-Framework\\src\\Pages\\signup\\SignupWithEmail.tsx":"75","D:\\work\\TDW-Framework\\src\\Pages\\signup\\SignupWithMobile.tsx":"76","D:\\work\\TDW-Framework\\src\\Pages\\dashboard\\index.tsx":"77","D:\\work\\TDW-Framework\\src\\Pages\\signup\\index.tsx":"78","D:\\work\\TDW-Framework\\src\\Pages\\forgetPassword\\index.tsx":"79","D:\\work\\TDW-Framework\\src\\Pages\\resetPassword\\index.tsx":"80","D:\\work\\TDW-Framework\\src\\Pages\\postAd\\index.tsx":"81","D:\\work\\TDW-Framework\\src\\Pages\\signup\\useForm.ts":"82","D:\\work\\TDW-Framework\\src\\Pages\\resetPassword\\useForm.ts":"83","D:\\work\\TDW-Framework\\src\\Pages\\forgetPassword\\useForm.ts":"84","D:\\work\\TDW-Framework\\src\\Pages\\login\\useForm.ts":"85","D:\\work\\TDW-Framework\\src\\components\\DialogBox\\FullScreenDialog.tsx":"86","D:\\work\\TDW-Framework\\src\\components\\ListingCard\\index.tsx":"87","D:\\work\\TDW-Framework\\src\\components\\BreadCrumbs\\index.tsx":"88","D:\\work\\TDW-Framework\\src\\sections\\VerticalCarFilters\\index.tsx":"89","D:\\work\\TDW-Framework\\src\\sections\\HorizontalFilters\\index.tsx":"90","D:\\work\\TDW-Framework\\src\\layout\\Sections\\Sections\\PinVerfication\\index.tsx":"91","D:\\work\\TDW-Framework\\src\\components\\ListingCard\\styles.ts":"92","D:\\work\\TDW-Framework\\src\\sections\\VerticalCarFilters\\styles.ts":"93","D:\\work\\TDW-Framework\\src\\layout\\Sections\\Sections\\PinVerfication\\useStyles.ts":"94","D:\\work\\TDW-Framework\\src\\layout\\Sections\\Utils\\Text.tsx":"95","D:\\work\\TDW-Framework\\src\\components\\InputField\\InputFieldWithButton.tsx":"96","D:\\work\\TDW-Framework\\src\\components\\DialogBox\\index.tsx":"97","D:\\work\\TDW-Framework\\src\\components\\Dropdown\\index.tsx":"98","D:\\work\\TDW-Framework\\src\\components\\LayoutToggler\\index.tsx":"99","D:\\work\\TDW-Framework\\src\\components\\Accordion\\index.tsx":"100","D:\\work\\TDW-Framework\\src\\components\\Dropdown\\styles.ts":"101","D:\\work\\TDW-Framework\\src\\components\\DialogBox\\DialogBox.tsx":"102","D:\\work\\TDW-Framework\\src\\components\\Accordion\\styles.ts":"103","D:\\work\\TDW-Framework\\src\\Pages\\AddEditCar\\SelectInputComponent.tsx":"104","D:\\work\\TDW-Framework\\src\\Utils\\helperFunctions.ts":"105"},{"size":360,"mtime":1627304935763,"results":"106","hashOfConfig":"107"},{"size":487,"mtime":1627304935824,"results":"108","hashOfConfig":"107"},{"size":571,"mtime":1628627407349,"results":"109","hashOfConfig":"107"},{"size":254,"mtime":1627304935824,"results":"110","hashOfConfig":"107"},{"size":2100,"mtime":1628627407390,"results":"111","hashOfConfig":"107"},{"size":1069,"mtime":1628631512428,"results":"112","hashOfConfig":"107"},{"size":462,"mtime":1628627407384,"results":"113","hashOfConfig":"107"},{"size":767,"mtime":1628277255019,"results":"114","hashOfConfig":"107"},{"size":952,"mtime":1627304935833,"results":"115","hashOfConfig":"107"},{"size":148,"mtime":1628627407389,"results":"116","hashOfConfig":"107"},{"size":426,"mtime":1628627407390,"results":"117","hashOfConfig":"107"},{"size":775,"mtime":1628277255019,"results":"118","hashOfConfig":"107"},{"size":463,"mtime":1628631620194,"results":"119","hashOfConfig":"107"},{"size":4291,"mtime":1628631541857,"results":"120","hashOfConfig":"107"},{"size":193,"mtime":1628631541857,"results":"121","hashOfConfig":"107"},{"size":223,"mtime":1628631541857,"results":"122","hashOfConfig":"107"},{"size":946,"mtime":1628627407373,"results":"123","hashOfConfig":"107"},{"size":7225,"mtime":1628627407374,"results":"124","hashOfConfig":"107"},{"size":146,"mtime":1628627407374,"results":"125","hashOfConfig":"107"},{"size":253,"mtime":1628627407383,"results":"126","hashOfConfig":"107"},{"size":3660,"mtime":1628627407380,"results":"127","hashOfConfig":"107"},{"size":740,"mtime":1628627407380,"results":"128","hashOfConfig":"107"},{"size":2821,"mtime":1628784551771,"results":"129","hashOfConfig":"107"},{"size":1511,"mtime":1628627407391,"results":"130","hashOfConfig":"107"},{"size":2474,"mtime":1628277443052,"results":"131","hashOfConfig":"107"},{"size":495,"mtime":1628627407352,"results":"132","hashOfConfig":"107"},{"size":2273,"mtime":1628277254971,"results":"133","hashOfConfig":"107"},{"size":2833,"mtime":1628774837554,"results":"134","hashOfConfig":"107"},{"size":6620,"mtime":1628786286605,"results":"135","hashOfConfig":"107"},{"size":1746,"mtime":1628784590922,"results":"136","hashOfConfig":"107"},{"size":513,"mtime":1628277443047,"results":"137","hashOfConfig":"107"},{"size":280,"mtime":1628277254973,"results":"138","hashOfConfig":"107"},{"size":1587,"mtime":1628277254973,"results":"139","hashOfConfig":"107"},{"size":459,"mtime":1628627407373,"results":"140","hashOfConfig":"107"},{"size":1160,"mtime":1628627407357,"results":"141","hashOfConfig":"107"},{"size":1892,"mtime":1628277254972,"results":"142","hashOfConfig":"107"},{"size":3566,"mtime":1628163042922,"results":"143","hashOfConfig":"107"},{"size":5823,"mtime":1628778547469,"results":"144","hashOfConfig":"107"},{"size":5784,"mtime":1628775884053,"results":"145","hashOfConfig":"107"},{"size":785,"mtime":1628627407350,"results":"146","hashOfConfig":"107"},{"size":3638,"mtime":1628627407377,"results":"147","hashOfConfig":"107"},{"size":2170,"mtime":1628627407351,"results":"148","hashOfConfig":"107"},{"size":910,"mtime":1628277254972,"results":"149","hashOfConfig":"107"},{"size":249,"mtime":1628277443041,"results":"150","hashOfConfig":"107"},{"size":786,"mtime":1628627407357,"results":"151","hashOfConfig":"107"},{"size":607,"mtime":1628277254973,"results":"152","hashOfConfig":"107"},{"size":471,"mtime":1628163042922,"results":"153","hashOfConfig":"107"},{"size":3012,"mtime":1628627407372,"results":"154","hashOfConfig":"107"},{"size":604,"mtime":1628277254958,"results":"155","hashOfConfig":"107"},{"size":1441,"mtime":1628627407361,"results":"156","hashOfConfig":"107"},{"size":1229,"mtime":1628277254955,"results":"157","hashOfConfig":"107"},{"size":775,"mtime":1628277254970,"results":"158","hashOfConfig":"107"},{"size":361,"mtime":1628627407372,"results":"159","hashOfConfig":"107"},{"size":3636,"mtime":1628627407366,"results":"160","hashOfConfig":"107"},{"size":1151,"mtime":1628627407363,"results":"161","hashOfConfig":"107"},{"size":256,"mtime":1628277254955,"results":"162","hashOfConfig":"107"},{"size":1454,"mtime":1628627407367,"results":"163","hashOfConfig":"107"},{"size":3968,"mtime":1628627407382,"results":"164","hashOfConfig":"107"},{"size":3972,"mtime":1628627407382,"results":"165","hashOfConfig":"107"},{"size":319,"mtime":1628627407377,"results":"166","hashOfConfig":"107"},{"size":1019,"mtime":1628627407371,"results":"167","hashOfConfig":"107"},{"size":2324,"mtime":1628627407382,"results":"168","hashOfConfig":"107"},{"size":2629,"mtime":1628627407378,"results":"169","hashOfConfig":"107"},{"size":2386,"mtime":1628627407381,"results":"170","hashOfConfig":"107"},{"size":2360,"mtime":1628627407383,"results":"171","hashOfConfig":"107"},{"size":436,"mtime":1628627407381,"results":"172","hashOfConfig":"107"},{"size":7209,"mtime":1628627407386,"results":"173","hashOfConfig":"107"},{"size":1927,"mtime":1628627407379,"results":"174","hashOfConfig":"107"},{"size":1963,"mtime":1628627407381,"results":"175","hashOfConfig":"107"},{"size":939,"mtime":1628627407353,"results":"176","hashOfConfig":"107"},{"size":1186,"mtime":1628627407387,"results":"177","hashOfConfig":"107"},{"size":1487,"mtime":1628627407351,"results":"178","hashOfConfig":"107"},{"size":894,"mtime":1628627407360,"results":"179","hashOfConfig":"107"},{"size":642,"mtime":1628627407361,"results":"180","hashOfConfig":"107"},{"size":3968,"mtime":1628627407382,"results":"181","hashOfConfig":"107"},{"size":3972,"mtime":1628627407382,"results":"182","hashOfConfig":"107"},{"size":319,"mtime":1628627407377,"results":"183","hashOfConfig":"107"},{"size":2324,"mtime":1628627407382,"results":"184","hashOfConfig":"107"},{"size":2629,"mtime":1628627407378,"results":"185","hashOfConfig":"107"},{"size":2386,"mtime":1628627407381,"results":"186","hashOfConfig":"107"},{"size":436,"mtime":1628627407381,"results":"187","hashOfConfig":"107"},{"size":2360,"mtime":1628627407383,"results":"188","hashOfConfig":"107"},{"size":1963,"mtime":1628627407381,"results":"189","hashOfConfig":"107"},{"size":1927,"mtime":1628627407379,"results":"190","hashOfConfig":"107"},{"size":2030,"mtime":1628627407381,"results":"191","hashOfConfig":"107"},{"size":2164,"mtime":1628627407359,"results":"192","hashOfConfig":"107"},{"size":5398,"mtime":1628627407363,"results":"193","hashOfConfig":"107"},{"size":1748,"mtime":1628627407357,"results":"194","hashOfConfig":"107"},{"size":24690,"mtime":1628631541857,"results":"195","hashOfConfig":"107"},{"size":1568,"mtime":1628631541857,"results":"196","hashOfConfig":"107"},{"size":2269,"mtime":1628627407372,"results":"197","hashOfConfig":"107"},{"size":1784,"mtime":1628627407364,"results":"198","hashOfConfig":"107"},{"size":143,"mtime":1628627407389,"results":"199","hashOfConfig":"107"},{"size":1202,"mtime":1628627407372,"results":"200","hashOfConfig":"107"},{"size":1903,"mtime":1628627407372,"results":"201","hashOfConfig":"107"},{"size":1559,"mtime":1628627407360,"results":"202","hashOfConfig":"107"},{"size":824,"mtime":1628627407359,"results":"203","hashOfConfig":"107"},{"size":1102,"mtime":1628627407359,"results":"204","hashOfConfig":"107"},{"size":1317,"mtime":1628627407361,"results":"205","hashOfConfig":"107"},{"size":849,"mtime":1628627407357,"results":"206","hashOfConfig":"107"},{"size":515,"mtime":1628627407360,"results":"207","hashOfConfig":"107"},{"size":1038,"mtime":1628627407357,"results":"208","hashOfConfig":"107"},{"size":178,"mtime":1628627407357,"results":"209","hashOfConfig":"107"},{"size":1925,"mtime":1628773574476,"results":"210","hashOfConfig":"107"},{"size":293,"mtime":1628779854833,"results":"211","hashOfConfig":"107"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},"rqoeau",{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"291","messages":"292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"311","messages":"312","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"325","messages":"326","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"329","messages":"330","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"331","messages":"332","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"333","messages":"334","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"335","messages":"336","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"337","messages":"338","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"339","messages":"340","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"341","messages":"342","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"343","messages":"344","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"345","messages":"346","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"347","messages":"348","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"349","messages":"350","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"351","messages":"352","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"353","messages":"354","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"355","messages":"356","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"357","messages":"358","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"359","messages":"360","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"361","messages":"362","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"363","messages":"364","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"365","messages":"366","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"367","messages":"368","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"369","messages":"370","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"371","messages":"372","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"373","messages":"374","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"375","messages":"376","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"377","messages":"378","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"379","usedDeprecatedRules":"214"},{"filePath":"380","messages":"381","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"382","usedDeprecatedRules":"214"},{"filePath":"383","messages":"384","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"385","messages":"386","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"387","messages":"388","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"389","messages":"390","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"391","messages":"392","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"393","usedDeprecatedRules":"214"},{"filePath":"394","messages":"395","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"396","messages":"397","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"398","messages":"399","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"400","messages":"401","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"402","messages":"403","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"404","messages":"405","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"406","messages":"407","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"408","messages":"409","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"410","messages":"411","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"412","messages":"413","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"414","messages":"415","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"416","messages":"417","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"418","messages":"419","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"420","messages":"421","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"422","messages":"423","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"424","messages":"425","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\work\\TDW-Framework\\src\\index.tsx",[],["426","427"],"D:\\work\\TDW-Framework\\src\\redux\\store.ts",[],"D:\\work\\TDW-Framework\\src\\App.tsx",[],"D:\\work\\TDW-Framework\\src\\redux\\reducers\\rootReducer.ts",[],"D:\\work\\TDW-Framework\\src\\theme\\theme.ts",[],"D:\\work\\TDW-Framework\\src\\routes\\routes.tsx",[],"D:\\work\\TDW-Framework\\src\\redux\\reducers\\layoutSlice.ts",[],"D:\\work\\TDW-Framework\\src\\redux\\reducers\\authSlice.ts",[],"D:\\work\\TDW-Framework\\src\\theme\\globalFontSize.ts",[],"D:\\work\\TDW-Framework\\src\\theme\\color.ts",[],"D:\\work\\TDW-Framework\\src\\Utils\\constants\\colors\\colors.ts",[],"D:\\work\\TDW-Framework\\src\\routes\\privateRoutes.tsx",[],"D:\\work\\TDW-Framework\\src\\routes\\publicRoutes.tsx",[],"D:\\work\\TDW-Framework\\src\\routes\\paths.tsx",[],"D:\\work\\TDW-Framework\\src\\Pages\\carComparision\\index.tsx",[],"D:\\work\\TDW-Framework\\src\\Pages\\SearchUsedCars\\index.tsx",[],"D:\\work\\TDW-Framework\\src\\layout\\index.tsx",[],"D:\\work\\TDW-Framework\\src\\Pages\\carsListing\\index.tsx",[],"D:\\work\\TDW-Framework\\src\\Pages\\carDetail\\index.tsx",[],"D:\\work\\TDW-Framework\\src\\Pages\\verificationPage\\index.tsx",[],"D:\\work\\TDW-Framework\\src\\Pages\\login\\index.tsx",[],"D:\\work\\TDW-Framework\\src\\Pages\\home\\index.tsx",[],"D:\\work\\TDW-Framework\\src\\Pages\\AddEditCar\\index.tsx",[],"D:\\work\\TDW-Framework\\src\\Utils\\constants\\language\\en\\buttonLabels.ts",[],"D:\\work\\TDW-Framework\\src\\Utils\\constants\\language\\en\\footerData.ts",[],"D:\\work\\TDW-Framework\\src\\Utils\\constants\\language\\en\\listingData.ts",[],"D:\\work\\TDW-Framework\\src\\layout\\Sections\\Sections\\Header\\Header.tsx",[],"D:\\work\\TDW-Framework\\src\\Utils\\constants\\language\\en\\addEditCarData.ts",[],"D:\\work\\TDW-Framework\\src\\Pages\\AddEditCar\\useAddEditCar.tsx",[],"D:\\work\\TDW-Framework\\src\\Pages\\AddEditCar\\CustomStepperIcon.tsx",[],"D:\\work\\TDW-Framework\\src\\Utils\\themeConstants.tsx",[],"D:\\work\\TDW-Framework\\src\\layout\\Sections\\Sections\\Header\\paths.tsx",[],"D:\\work\\TDW-Framework\\src\\layout\\Sections\\Sections\\Header\\useStyles.tsx",[],"D:\\work\\TDW-Framework\\src\\layout\\Sections\\Utils\\color.constants.tsx",[],"D:\\work\\TDW-Framework\\src\\components\\CustomButton.tsx",[],"D:\\work\\TDW-Framework\\src\\layout\\Sections\\Sections\\Header\\Sidebar\\Sidebar.tsx",[],"D:\\work\\TDW-Framework\\src\\Pages\\AddEditCar\\UploadPhotosForm.tsx",[],"D:\\work\\TDW-Framework\\src\\Pages\\AddEditCar\\CarInformationForm.tsx",[],"D:\\work\\TDW-Framework\\src\\Pages\\AddEditCar\\CarAdditionalInformation.tsx",[],"D:\\work\\TDW-Framework\\src\\Utils\\constants\\formsConstants.ts",[],"D:\\work\\TDW-Framework\\src\\Pages\\carsListing\\useForm.ts",[],"D:\\work\\TDW-Framework\\src\\Utils\\constants\\language\\en\\filtersData.ts",[],"D:\\work\\TDW-Framework\\src\\layout\\Sections\\Sections\\Header\\Sidebar\\sidebarStyles.tsx",[],"D:\\work\\TDW-Framework\\src\\Utils\\Breakpoints.tsx",[],"D:\\work\\TDW-Framework\\src\\components\\CustomTitle\\style.tsx",[],"D:\\work\\TDW-Framework\\src\\layout\\Sections\\Sections\\ListingBanner\\ListBannerContainer.tsx",[],"D:\\work\\TDW-Framework\\src\\Pages\\AddEditCar\\SelectComponent.tsx",[],"D:\\work\\TDW-Framework\\src\\layout\\Sections\\Sections\\Banner\\Banner.tsx",[],"D:\\work\\TDW-Framework\\src\\components\\index.tsx",[],"D:\\work\\TDW-Framework\\src\\components\\ListingBanner\\ListingBannerContext.tsx",[],"D:\\work\\TDW-Framework\\src\\components\\CustomTitle\\CustomTitle.tsx",[],"D:\\work\\TDW-Framework\\src\\layout\\Sections\\Sections\\Banner\\bannerStyles.tsx",[],"D:\\work\\TDW-Framework\\src\\layout\\Sections\\Sections\\Banner\\useHooks.tsx",[],"D:\\work\\TDW-Framework\\src\\components\\SearchSelect\\SearchSelect.tsx",[],"D:\\work\\TDW-Framework\\src\\components\\ListingBanner\\useStyles.tsx",[],"D:\\work\\TDW-Framework\\src\\components\\CustomTitle\\Size.tsx",[],"D:\\work\\TDW-Framework\\src\\components\\SearchSelect\\selectStyles.tsx",[],"D:\\work\\TDW-Framework\\src\\pages\\signup\\SignupWithEmail.tsx",[],"D:\\work\\TDW-Framework\\src\\pages\\signup\\SignupWithMobile.tsx",[],"D:\\work\\TDW-Framework\\src\\pages\\dashboard\\index.tsx",[],"D:\\work\\TDW-Framework\\src\\globalStyles.ts",[],"D:\\work\\TDW-Framework\\src\\pages\\signup\\index.tsx",[],"D:\\work\\TDW-Framework\\src\\pages\\forgetPassword\\index.tsx",[],"D:\\work\\TDW-Framework\\src\\pages\\resetPassword\\index.tsx",[],"D:\\work\\TDW-Framework\\src\\pages\\signup\\useForm.ts",[],"D:\\work\\TDW-Framework\\src\\pages\\postAd\\index.tsx",[],"D:\\work\\TDW-Framework\\src\\sections\\Footer\\index.tsx",[],"D:\\work\\TDW-Framework\\src\\pages\\forgetPassword\\useForm.ts",["428"],"D:\\work\\TDW-Framework\\src\\pages\\resetPassword\\useForm.ts",["429"],"D:\\work\\TDW-Framework\\src\\Utils\\regex.ts",[],"D:\\work\\TDW-Framework\\src\\sections\\Footer\\styles.ts",[],"D:\\work\\TDW-Framework\\src\\Utils\\constants\\language\\Text.ts",[],"D:\\work\\TDW-Framework\\src\\components\\InputField\\index.tsx",[],"D:\\work\\TDW-Framework\\src\\components\\InputField\\styles.ts",[],"D:\\work\\TDW-Framework\\src\\Pages\\signup\\SignupWithEmail.tsx",[],"D:\\work\\TDW-Framework\\src\\Pages\\signup\\SignupWithMobile.tsx",[],"D:\\work\\TDW-Framework\\src\\Pages\\dashboard\\index.tsx",[],"D:\\work\\TDW-Framework\\src\\Pages\\signup\\index.tsx",[],"D:\\work\\TDW-Framework\\src\\Pages\\forgetPassword\\index.tsx",[],"D:\\work\\TDW-Framework\\src\\Pages\\resetPassword\\index.tsx",[],"D:\\work\\TDW-Framework\\src\\Pages\\postAd\\index.tsx",[],"D:\\work\\TDW-Framework\\src\\Pages\\signup\\useForm.ts",[],"D:\\work\\TDW-Framework\\src\\Pages\\resetPassword\\useForm.ts",["430"],"import { useState } from \"react\";\r\nimport { fieldNames, messages } from \"../../Utils/constants/formsConstants\";\r\n\r\nconst initialValues: any = {\r\n  password: \"\",\r\n  confirmPassword: \"\",\r\n};\r\n\r\nexport const useForm = (token: any, validateOnChange = false) => {\r\n  const [values, setValues] = useState(initialValues);\r\n  const [errors, setErrors] = useState(initialValues);\r\n  const [responseMessage, setResponseMessage] = useState(\"\");\r\n\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const validate = (fieldValues = values) => {\r\n    let temp = { ...errors };\r\n\r\n    if (fieldNames.password in fieldValues) {\r\n      temp.password = fieldValues.password.length < 5 ? messages.password : \"\";\r\n    }\r\n    if (fieldNames.confirmPassword in fieldValues) {\r\n      temp.confirmPassword =\r\n        fieldValues.confirmPassword !== fieldValues.password\r\n          ? messages.notMatch\r\n          : \"\";\r\n    }\r\n\r\n    setErrors({\r\n      ...temp,\r\n    });\r\n\r\n    if (fieldValues === values)\r\n      return Object.values(temp).every((x) => x === \"\");\r\n  };\r\n\r\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { name, value } = e.target;\r\n\r\n    setValues({\r\n      ...values,\r\n      [name]: value,\r\n    });\r\n    if (validateOnChange) validate({ [name]: value });\r\n  };\r\n\r\n  const resetForm = () => {\r\n    setValues(initialValues);\r\n    setErrors({});\r\n  };\r\n\r\n  const handleSubmit = async (e: any) => {\r\n    e.preventDefault();\r\n    console.log(\"btn clicked\", values);\r\n    if (validate()) {\r\n      setIsLoading(true);\r\n      console.log(values, token);\r\n      let requestBody = {\r\n        password: values.password,\r\n        passwordConfirm: values.confirmPassword,\r\n      };\r\n      console.log(\"request Body\", requestBody);\r\n    }\r\n  };\r\n\r\n  return {\r\n    values,\r\n    setValues,\r\n    errors,\r\n    setErrors,\r\n    handleInputChange,\r\n    resetForm,\r\n    validate,\r\n    handleSubmit,\r\n    isLoading,\r\n    responseMessage,\r\n  };\r\n};\r\n","D:\\work\\TDW-Framework\\src\\Pages\\forgetPassword\\useForm.ts",["431"],"import { useState } from \"react\";\r\nimport { messages, fieldNames } from \"../../Utils/constants/formsConstants\";\r\nimport { isEmailValid } from \"../../Utils/regex\";\r\n\r\nconst initialValues: any = {\r\n  email: \"\",\r\n};\r\n\r\nexport const useForm = (validateOnChange = false) => {\r\n  const [values, setValues] = useState(initialValues);\r\n  const [errors, setErrors] = useState(initialValues);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [responseMessage, setResponseMessage] = useState(\"\");\r\n  const [resetLinkMessage, setResetLinkMessage] = useState(\"\");\r\n\r\n  const validate = (fieldValues = values) => {\r\n    let temp = { ...errors };\r\n\r\n    if (fieldNames.email in fieldValues) {\r\n      temp.email =\r\n        fieldValues.email.trim() === \"\"\r\n          ? messages.isRequired\r\n          : isEmailValid(fieldValues.email)\r\n          ? \"\"\r\n          : messages.notValid;\r\n    }\r\n\r\n    setErrors({\r\n      ...temp,\r\n    });\r\n\r\n    if (fieldValues === values)\r\n      return Object.values(temp).every((x) => x === \"\");\r\n  };\r\n\r\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { name, value } = e.target;\r\n\r\n    setValues({\r\n      ...values,\r\n      [name]: value,\r\n    });\r\n    if (validateOnChange) validate({ [name]: value });\r\n  };\r\n\r\n  const resetForm = () => {\r\n    setValues(initialValues);\r\n    setErrors({});\r\n  };\r\n\r\n  const handleSubmit = async (e: any) => {\r\n    e.preventDefault();\r\n    console.log(\"btn clicked\", values);\r\n    if (validate()) {\r\n      setIsLoading(true);\r\n      console.log(values);\r\n      let requestBody = {\r\n        email: values.email,\r\n      };\r\n      console.log(\"request body,\", requestBody);\r\n    }\r\n  };\r\n\r\n  return {\r\n    values,\r\n    setValues,\r\n    errors,\r\n    setErrors,\r\n    handleInputChange,\r\n    resetForm,\r\n    validate,\r\n    handleSubmit,\r\n    isLoading,\r\n    resetLinkMessage,\r\n    responseMessage,\r\n    setResetLinkMessage,\r\n  };\r\n};\r\n","D:\\work\\TDW-Framework\\src\\Pages\\login\\useForm.ts",[],"D:\\work\\TDW-Framework\\src\\components\\DialogBox\\FullScreenDialog.tsx",[],"D:\\work\\TDW-Framework\\src\\components\\ListingCard\\index.tsx",[],"D:\\work\\TDW-Framework\\src\\components\\BreadCrumbs\\index.tsx",[],"D:\\work\\TDW-Framework\\src\\sections\\VerticalCarFilters\\index.tsx",["432"],"import {\r\n  Grid,\r\n  Slider,\r\n  FormGroup,\r\n  FormControlLabel,\r\n  Checkbox,\r\n  Typography,\r\n  IconButton,\r\n} from \"@material-ui/core\";\r\nimport FilterAccordion from \"../../components/Accordion\";\r\nimport {\r\n  Carfilters,\r\n  CarFiltersData,\r\n} from \"../../Utils/constants/language/en/filtersData\";\r\nimport { City, State } from \"country-state-city\";\r\nimport HighlightOffRoundedIcon from \"@material-ui/icons/HighlightOffRounded\";\r\nimport InputFieldWithButton from \"../../components/InputField/InputFieldWithButton\";\r\nimport InputField from \"../../components/InputField\";\r\nimport { fieldNames } from \"../../Utils/constants/formsConstants\";\r\nimport { useForm } from \"../../Pages/carsListing/useForm\";\r\nimport VerticalFilterStyles from \"./styles\";\r\nimport DialogBox from \"../../components/DialogBox\";\r\nimport { useState } from \"react\";\r\nimport { ICity } from \"country-state-city/dist/lib/interface\";\r\nimport { APPLIED_FILTERS } from \"../../Utils/constants/language/en/buttonLabels\";\r\n\r\nexport interface CarFiltersProps {}\r\n\r\nconst CarFilters: React.FC<CarFiltersProps> = () => {\r\n  const [searchResult, setSearchResult] = useState<ICity[]>();\r\n  const {} = VerticalFilterStyles();\r\n  const {\r\n    KEYWORDS,\r\n    PRICE_RANGE,\r\n    YEAR,\r\n    MAKE,\r\n    PROVINCE,\r\n    CITY,\r\n    REGISTRATION_CITY,\r\n    MILEAGE,\r\n    TRANSMISSION,\r\n    ENGINE_TYPE,\r\n    ENGINE_CAPACITY,\r\n    COLOR,\r\n    BODY_TYPE,\r\n    PICTURE_AVAILABILITY,\r\n    VIDEO_AVAILABILITY,\r\n    SELLER_TYPE,\r\n    AD_TYPE\r\n  } = CarFiltersData;\r\n\r\n  const majorCities = [\"Karachi\", \"Islamabad\", \"Lahore\", \"Peshawar\", \"Quetta\"];\r\n  const mainCarTypes = [\"Sedan\", \"Hatchback\", \"Pick Up\"];\r\n  const mainColors = [\"Black\", \"White\", \"Red\"];\r\n  const cities = City.getCitiesOfCountry(\"PK\");\r\n  const provinces = State.getStatesOfCountry(\"PK\");\r\n  const extractedCityNames = cities?.map((item) => item.name);\r\n  let cityNames = [];\r\n  if (extractedCityNames) {\r\n    cityNames.push(...extractedCityNames);\r\n  }\r\n  const {\r\n    values,\r\n    setValues,\r\n    errors,\r\n    handleInputChange,\r\n    handleCheckboxChange,\r\n    handleSingleCheckBoxChange,\r\n    appliedFilters,\r\n    removeFilter,\r\n    handleSubmit,\r\n  } = useForm(true);\r\n\r\n  const handleSearchInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    let result = City.getCitiesOfCountry(\"PK\")?.filter(\r\n      (city: ICity) =>\r\n        city.name.substr(0, e.target.value.length).toLowerCase() ===\r\n        e.target.value.toLowerCase()\r\n    );\r\n    if (e.target.value === \"\") {\r\n      result = [];\r\n    }\r\n    setSearchResult(result);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {appliedFilters.length > 0 && (\r\n        <FilterAccordion title={APPLIED_FILTERS}>\r\n          <Grid container spacing={1}>\r\n            {appliedFilters.map((filter: any) => (\r\n              <Grid\r\n                key={`filter-${filter}`}\r\n                item\r\n                container\r\n                justifyContent=\"space-between\"\r\n                xs={12}\r\n              >\r\n                <Typography variant=\"body2\">{filter}</Typography>\r\n                <IconButton size=\"small\" onClick={() => removeFilter(filter)}>\r\n                  <HighlightOffRoundedIcon color=\"secondary\" fontSize=\"small\" />\r\n                </IconButton>\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n        </FilterAccordion>\r\n      )}\r\n      <FilterAccordion title={KEYWORDS}>\r\n        <InputFieldWithButton\r\n          name={fieldNames.keywords}\r\n          label=\"Keywords\"\r\n          placeholder=\"Eg. Honda In Lahore\"\r\n          value={values.keywords}\r\n          error={errors.keywords}\r\n          onChange={handleInputChange}\r\n          handleClick={handleSubmit}\r\n        />\r\n      </FilterAccordion>\r\n      <FilterAccordion title={PRICE_RANGE}>\r\n        <Grid container direction=\"column\">\r\n          <Grid item container spacing={1}>\r\n            <Grid item xs={5}>\r\n              <InputField\r\n                name={fieldNames.priceFrom}\r\n                label=\"From\"\r\n                value={values.priceRange[0]}\r\n                error={errors.priceFrom}\r\n                onChange={(e: any) => {\r\n                  setValues((previousState: any) => {\r\n                    previousState.priceRange[0] = e.target.value;\r\n                    return { ...previousState };\r\n                  });\r\n                }}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={7}>\r\n              <InputFieldWithButton\r\n                name={fieldNames.priceTo}\r\n                label=\"To\"\r\n                value={values.priceRange[1]}\r\n                error={errors.priceTo}\r\n                onChange={(e: any) => {\r\n                  setValues((previousState: any) => {\r\n                    previousState.priceRange[1] = e.target.value;\r\n                    return { ...previousState };\r\n                  });\r\n                }}\r\n                handleClick={handleSubmit}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item>\r\n            <Slider\r\n              value={[values.priceRange[0], values.priceRange[1]]}\r\n              min={50000}\r\n              max={5000000}\r\n              onChange={(event: any, newValue: number | number[]) => {\r\n                setValues((previousState: any) => {\r\n                  console.log(newValue);\r\n                  previousState.priceRange = newValue as number[];\r\n                  return { ...previousState };\r\n                });\r\n              }}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </FilterAccordion>\r\n      <FilterAccordion title={YEAR}>\r\n        <Grid item container spacing={1}>\r\n          <Grid item xs={5}>\r\n            <InputField\r\n              name={fieldNames.yearFrom}\r\n              label=\"From\"\r\n              value={values.yearRange[0]}\r\n              error={errors.yearFrom}\r\n              onChange={(e: any) => {\r\n                setValues((previousState: any) => {\r\n                  previousState.priceRange[0] = e.target.value;\r\n                  return { ...previousState };\r\n                });\r\n              }}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={7}>\r\n            <InputFieldWithButton\r\n              name={fieldNames.yearTo}\r\n              label=\"To\"\r\n              value={values.yearRange[1]}\r\n              error={errors.yearTo}\r\n              onChange={(e: any) => {\r\n                setValues((previousState: any) => {\r\n                  previousState.priceRange[1] = e.target.value;\r\n                  return { ...previousState };\r\n                });\r\n              }}\r\n              handleClick={handleSubmit}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </FilterAccordion>\r\n      <FilterAccordion title={MAKE}>\r\n        <InputField label=\"Eg. Honda In Lahore\" />\r\n      </FilterAccordion>\r\n      <FilterAccordion title={PROVINCE}>\r\n        <FormGroup>\r\n          {provinces.map((province) => (\r\n            <FormControlLabel\r\n              key={`province-${province.name}`}\r\n              control={\r\n                <Checkbox\r\n                  checked={values.province.indexOf(province.name) > -1}\r\n                  onChange={(e) => handleCheckboxChange(e, \"province\")}\r\n                  name={province.name}\r\n                  color=\"secondary\"\r\n                  size=\"small\"\r\n                />\r\n              }\r\n              label={province.name}\r\n            />\r\n          ))}\r\n        </FormGroup>\r\n      </FilterAccordion>\r\n      <FilterAccordion title={CITY}>\r\n        <FormGroup>\r\n          {cityNames\r\n            .filter((item) => majorCities.includes(item))\r\n            .map((city) => (\r\n              <FormControlLabel\r\n                key={`city-${city}`}\r\n                control={\r\n                  <Checkbox\r\n                    checked={values.city.indexOf(city) > -1}\r\n                    onChange={(e) => handleCheckboxChange(e, \"city\")}\r\n                    name={city}\r\n                    color=\"secondary\"\r\n                  />\r\n                }\r\n                label={city}\r\n              />\r\n            ))}\r\n          <DialogBox title=\"Select Cities\">\r\n            <Grid style={{ display: \"flex\" }} container>\r\n              <Grid xs={12}>\r\n                <InputField\r\n                  variant=\"filled\"\r\n                  label=\"Search\"\r\n                  onChange={handleSearchInputChange}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <Typography variant=\"h4\" gutterBottom>\r\n                  {\"Search Result\"}\r\n                </Typography>\r\n                {searchResult &&\r\n                  searchResult.map((city: ICity) => {\r\n                    return (\r\n                      <FormControlLabel\r\n                        key={`city-${city.name}`}\r\n                        control={\r\n                          <Checkbox\r\n                            checked={values.city.indexOf(city.name) > -1}\r\n                            onChange={(e) => handleCheckboxChange(e, \"city\")}\r\n                            name={city.name}\r\n                            color=\"secondary\"\r\n                            size=\"small\"\r\n                          />\r\n                        }\r\n                        label={city.name}\r\n                      />\r\n                    );\r\n                  })}\r\n              </Grid>\r\n              {provinces.map((province) => (\r\n                <Grid item xs={12}>\r\n                  <Typography variant=\"h4\" gutterBottom>\r\n                    {province.name}\r\n                  </Typography>\r\n                  {City.getCitiesOfState(\r\n                    province.countryCode,\r\n                    province.isoCode\r\n                  ).map((city) => {\r\n                    return (\r\n                      <FormControlLabel\r\n                        key={`city-${city.name}`}\r\n                        control={\r\n                          <Checkbox\r\n                            checked={values.city.indexOf(city.name) > -1}\r\n                            onChange={(e) => handleCheckboxChange(e, \"city\")}\r\n                            name={city.name}\r\n                            color=\"secondary\"\r\n                            size=\"small\"\r\n                          />\r\n                        }\r\n                        label={city.name}\r\n                      />\r\n                    );\r\n                  })}\r\n                </Grid>\r\n              ))}\r\n            </Grid>\r\n          </DialogBox>\r\n        </FormGroup>\r\n      </FilterAccordion>\r\n      <FilterAccordion title={REGISTRATION_CITY}>\r\n        <FormGroup>\r\n          {cityNames\r\n            .filter((item) => majorCities.includes(item))\r\n            .map((city) => (\r\n              <FormControlLabel\r\n                key={`city-${city}`}\r\n                control={\r\n                  <Checkbox\r\n                    checked={values.registrationCity.indexOf(city) > -1}\r\n                    onChange={(e) =>\r\n                      handleCheckboxChange(e, \"registrationCity\")\r\n                    }\r\n                    name={city}\r\n                    color=\"secondary\"\r\n                  />\r\n                }\r\n                label={city}\r\n              />\r\n            ))}\r\n\r\n          <DialogBox title=\"Select Cities\">\r\n            <Grid style={{ display: \"flex\" }} container>\r\n              {provinces.map((province) => (\r\n                <Grid item xs={12} md={6}>\r\n                  <Typography variant=\"h4\" gutterBottom>\r\n                    {province.name}\r\n                  </Typography>\r\n                  {City.getCitiesOfState(\r\n                    province.countryCode,\r\n                    province.isoCode\r\n                  ).map((city) => {\r\n                    return (\r\n                      <FormControlLabel\r\n                        key={`city-${city.name}`}\r\n                        control={\r\n                          <Checkbox\r\n                            checked={values.city.indexOf(city.name) > -1}\r\n                            onChange={(e) => handleCheckboxChange(e, \"city\")}\r\n                            name={city.name}\r\n                            color=\"secondary\"\r\n                            size=\"small\"\r\n                          />\r\n                        }\r\n                        label={city.name}\r\n                      />\r\n                    );\r\n                  })}\r\n                </Grid>\r\n              ))}\r\n            </Grid>\r\n          </DialogBox>\r\n        </FormGroup>\r\n      </FilterAccordion>\r\n      <FilterAccordion title={MILEAGE}>\r\n        <Grid item container spacing={1}>\r\n          <Grid item xs={5}>\r\n            <InputField\r\n              name={fieldNames.mileageFrom}\r\n              label=\"From\"\r\n              value={values.mileageRange[0]}\r\n              error={errors.mileageFrom}\r\n              onChange={(e: any) => {\r\n                setValues((previousState: any) => {\r\n                  previousState.mileageRange[0] = e.target.value;\r\n                  return { ...previousState };\r\n                });\r\n              }}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={7}>\r\n            <InputFieldWithButton\r\n              name={fieldNames.mileageTo}\r\n              label=\"To\"\r\n              value={values.mileageRange[1]}\r\n              error={errors.mileageTo}\r\n              onChange={(e: any) => {\r\n                setValues((previousState: any) => {\r\n                  previousState.mileageRange[1] = e.target.value;\r\n                  return { ...previousState };\r\n                });\r\n              }}\r\n              handleClick={handleSubmit}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </FilterAccordion>\r\n      <FilterAccordion title={TRANSMISSION}>\r\n        <FormGroup>\r\n          {Carfilters.TRANSMISSION.map((type) => (\r\n            <FormControlLabel\r\n              key={`transmission-type-${type}`}\r\n              control={\r\n                <Checkbox\r\n                  checked={values.transmission.indexOf(type) > -1}\r\n                  onChange={(e) => handleCheckboxChange(e, \"transmission\")}\r\n                  name={type}\r\n                  color=\"secondary\"\r\n                  size=\"small\"\r\n                />\r\n              }\r\n              label={type}\r\n            />\r\n          ))}\r\n        </FormGroup>\r\n      </FilterAccordion>\r\n      <FilterAccordion title={ENGINE_TYPE}>\r\n        <FormGroup>\r\n          {Carfilters.ENGINE_TYPE.map((type) => (\r\n            <FormControlLabel\r\n              key={`engine-type-${type}`}\r\n              control={\r\n                <Checkbox\r\n                  checked={values.engineType.indexOf(type) > -1}\r\n                  onChange={(e) => handleCheckboxChange(e, \"engineType\")}\r\n                  name={type}\r\n                  color=\"secondary\"\r\n                  size=\"small\"\r\n                />\r\n              }\r\n              label={type}\r\n            />\r\n          ))}\r\n        </FormGroup>\r\n      </FilterAccordion>\r\n      <FilterAccordion title={ENGINE_CAPACITY}>\r\n        <Grid item container spacing={1}>\r\n          <Grid item xs={5}>\r\n            <InputField\r\n              name={fieldNames.engineCapacityFrom}\r\n              label=\"From\"\r\n              value={values.engineCapacityRange[0]}\r\n              error={errors.engineCapacityFrom}\r\n              onChange={(e: any) => {\r\n                setValues((previousState: any) => {\r\n                  previousState.mileageRange[0] = e.target.value;\r\n                  return { ...previousState };\r\n                });\r\n              }}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={7}>\r\n            <InputFieldWithButton\r\n              name={fieldNames.engineCapacityTo}\r\n              label=\"To\"\r\n              value={values.engineCapacityRange[1]}\r\n              error={errors.engineCapacityTo}\r\n              onChange={(e: any) => {\r\n                setValues((previousState: any) => {\r\n                  previousState.mileageRange[1] = e.target.value;\r\n                  return { ...previousState };\r\n                });\r\n              }}\r\n              handleClick={handleSubmit}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </FilterAccordion>\r\n      <FilterAccordion title={COLOR}>\r\n        <FormGroup>\r\n          {Carfilters.COLOR.filter((item) =>\r\n            mainColors.includes(item.name)\r\n          ).map((type) => (\r\n            <FormControlLabel\r\n              key={`color-type-${type.name}`}\r\n              control={\r\n                <Checkbox\r\n                  checked={values.color.indexOf(type.name) > -1}\r\n                  onChange={(e) => handleCheckboxChange(e, \"color\")}\r\n                  name={type.name}\r\n                  color=\"secondary\"\r\n                  size=\"small\"\r\n                />\r\n              }\r\n              label={\r\n                <div style={{ display: \"flex\" }}>\r\n                  <span\r\n                    style={{\r\n                      borderRadius: \"50%\",\r\n                      maxWidth: \"20px\",\r\n                      maxHeight: \"20px\",\r\n                      minWidth: \"20px\",\r\n                      minHeight: \"20px\",\r\n                      backgroundColor: type.hex,\r\n                      border: \"0.2px solid grey\",\r\n                      marginRight: \"7px\",\r\n                    }}\r\n                  />\r\n                  <Typography>{type.name}</Typography>\r\n                </div>\r\n              }\r\n            />\r\n          ))}\r\n          <FormControlLabel\r\n            key={`color-type-other`}\r\n            control={\r\n              <Checkbox\r\n                checked={values.color.indexOf(\"Other\") > -1}\r\n                onChange={(e) => handleCheckboxChange(e, \"color\")}\r\n                name=\"Other\"\r\n                color=\"secondary\"\r\n                size=\"small\"\r\n              />\r\n            }\r\n            label={\r\n              <div style={{ display: \"flex\" }}>\r\n                <Typography>Other Colors</Typography>\r\n              </div>\r\n            }\r\n          />\r\n\r\n          <DialogBox title=\"Select Color\">\r\n            <Grid container spacing={2}>\r\n              {Carfilters.COLOR.map((type) => (\r\n                <Grid item xs={12} md={6}>\r\n                  <FormControlLabel\r\n                    key={`color-type-${type.name}`}\r\n                    control={\r\n                      <Checkbox\r\n                        checked={values.color.indexOf(type.name) > -1}\r\n                        onChange={(e) => handleCheckboxChange(e, \"color\")}\r\n                        name={type.name}\r\n                        color=\"secondary\"\r\n                        size=\"small\"\r\n                      />\r\n                    }\r\n                    label={\r\n                      <div style={{ display: \"flex\" }}>\r\n                        <span\r\n                          style={{\r\n                            borderRadius: \"50%\",\r\n                            maxWidth: \"20px\",\r\n                            maxHeight: \"20px\",\r\n                            minWidth: \"20px\",\r\n                            minHeight: \"20px\",\r\n                            backgroundColor: type.hex,\r\n                            border: \"0.2px solid grey\",\r\n                            marginRight: \"7px\",\r\n                          }}\r\n                        />\r\n                        <Typography>{type.name}</Typography>\r\n                      </div>\r\n                    }\r\n                  />\r\n                </Grid>\r\n              ))}\r\n              <Grid item xs={12}>\r\n                <FormControlLabel\r\n                  key={`color-type-other`}\r\n                  control={\r\n                    <Checkbox\r\n                      checked={values.color.indexOf(\"Other\") > -1}\r\n                      onChange={(e) => handleCheckboxChange(e, \"color\")}\r\n                      name=\"Other\"\r\n                      color=\"secondary\"\r\n                      size=\"small\"\r\n                    />\r\n                  }\r\n                  label={\r\n                    <div style={{ display: \"flex\" }}>\r\n                      <Typography>Other Colors</Typography>\r\n                    </div>\r\n                  }\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </DialogBox>\r\n        </FormGroup>\r\n      </FilterAccordion>\r\n      <FilterAccordion title={BODY_TYPE}>\r\n        <FormGroup>\r\n          {Carfilters.BODY_TYPE.filter((item) =>\r\n            mainCarTypes.includes(item.name)\r\n          ).map((type) => (\r\n            <FormControlLabel\r\n              key={`body-type-${type.name}`}\r\n              control={\r\n                <Checkbox\r\n                  checked={values.bodyType.indexOf(type.name) > -1}\r\n                  onChange={(e) => handleCheckboxChange(e, \"bodyType\")}\r\n                  name={type.name}\r\n                  color=\"secondary\"\r\n                  size=\"small\"\r\n                />\r\n              }\r\n              label={\r\n                <div style={{ display: \"flex\" }}>\r\n                  <img\r\n                    width=\"60px\"\r\n                    style={{ margin: \"0 10px\" }}\r\n                    src={type.icon}\r\n                    alt={type.name}\r\n                  />\r\n                  <Typography>{type.name}</Typography>\r\n                </div>\r\n              }\r\n            />\r\n          ))}\r\n\r\n          <DialogBox title=\"Select Body Type\">\r\n            <Grid container spacing={2}>\r\n              {Carfilters.BODY_TYPE.map((type) => (\r\n                <Grid item xs={12} md={6}>\r\n                  <FormControlLabel\r\n                    key={`body-type-${type.name}`}\r\n                    control={\r\n                      <Checkbox\r\n                        checked={values.bodyType.indexOf(type.name) > -1}\r\n                        onChange={(e) => handleCheckboxChange(e, \"bodyType\")}\r\n                        name={type.name}\r\n                        color=\"secondary\"\r\n                        size=\"small\"\r\n                      />\r\n                    }\r\n                    label={\r\n                      <div style={{ display: \"flex\" }}>\r\n                        <img\r\n                          width=\"60px\"\r\n                          style={{ margin: \"0 10px\" }}\r\n                          src={type.icon}\r\n                          alt={type.name}\r\n                        />\r\n                        <Typography>{type.name}</Typography>\r\n                      </div>\r\n                    }\r\n                  />\r\n                </Grid>\r\n              ))}\r\n            </Grid>\r\n          </DialogBox>\r\n        </FormGroup>\r\n      </FilterAccordion>\r\n      <FilterAccordion title={PICTURE_AVAILABILITY}>\r\n        <FormGroup>\r\n          <FormControlLabel\r\n            control={\r\n              <Checkbox\r\n                checked={values.withPicture}\r\n                onChange={handleSingleCheckBoxChange}\r\n                name={fieldNames.pictureAvailability}\r\n                color=\"secondary\"\r\n                size=\"small\"\r\n              />\r\n            }\r\n            label={Carfilters.PICTURE_AVAILABILITY[0]}\r\n          />\r\n        </FormGroup>\r\n      </FilterAccordion>\r\n      <FilterAccordion title={VIDEO_AVAILABILITY}>\r\n        <FormGroup>\r\n          <FormControlLabel\r\n            control={\r\n              <Checkbox\r\n                checked={values.withVideo}\r\n                onChange={handleSingleCheckBoxChange}\r\n                name={fieldNames.videoAvailability}\r\n                color=\"secondary\"\r\n                size=\"small\"\r\n              />\r\n            }\r\n            label={Carfilters.VIDEO_AVAILABILITY[0]}\r\n          />\r\n        </FormGroup>\r\n      </FilterAccordion>\r\n      <FilterAccordion title={SELLER_TYPE}>\r\n        <FormGroup>\r\n          {Carfilters.SELLER_TYPE.map((type) => (\r\n            <FormControlLabel\r\n              key={`seller-type-${type}`}\r\n              control={\r\n                <Checkbox\r\n                  checked={values.sellerType.indexOf(type) > -1}\r\n                  onChange={(e) => handleCheckboxChange(e, \"sellerType\")}\r\n                  name={type}\r\n                  color=\"secondary\"\r\n                  size=\"small\"\r\n                />\r\n              }\r\n              label={type}\r\n            />\r\n          ))}\r\n        </FormGroup>\r\n      </FilterAccordion>\r\n      <FilterAccordion title={AD_TYPE}>\r\n        <FormGroup>\r\n          {Carfilters.AD_TYPE.map((type) => (\r\n            <FormControlLabel\r\n              key={`ad-type-${type}`}\r\n              control={\r\n                <Checkbox\r\n                  checked={values.adType.indexOf(type) > -1}\r\n                  onChange={(e) => handleCheckboxChange(e, \"adType\")}\r\n                  name={type}\r\n                  color=\"secondary\"\r\n                  size=\"small\"\r\n                />\r\n              }\r\n              label={type}\r\n            />\r\n          ))}\r\n        </FormGroup>\r\n      </FilterAccordion>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CarFilters;\r\n","D:\\work\\TDW-Framework\\src\\sections\\HorizontalFilters\\index.tsx",[],"D:\\work\\TDW-Framework\\src\\layout\\Sections\\Sections\\PinVerfication\\index.tsx",[],"D:\\work\\TDW-Framework\\src\\components\\ListingCard\\styles.ts",[],"D:\\work\\TDW-Framework\\src\\sections\\VerticalCarFilters\\styles.ts",[],"D:\\work\\TDW-Framework\\src\\layout\\Sections\\Sections\\PinVerfication\\useStyles.ts",[],"D:\\work\\TDW-Framework\\src\\layout\\Sections\\Utils\\Text.tsx",[],"D:\\work\\TDW-Framework\\src\\components\\InputField\\InputFieldWithButton.tsx",[],"D:\\work\\TDW-Framework\\src\\components\\DialogBox\\index.tsx",[],"D:\\work\\TDW-Framework\\src\\components\\Dropdown\\index.tsx",[],"D:\\work\\TDW-Framework\\src\\components\\LayoutToggler\\index.tsx",[],"D:\\work\\TDW-Framework\\src\\components\\Accordion\\index.tsx",[],"D:\\work\\TDW-Framework\\src\\components\\Dropdown\\styles.ts",[],"D:\\work\\TDW-Framework\\src\\components\\DialogBox\\DialogBox.tsx",[],"D:\\work\\TDW-Framework\\src\\components\\Accordion\\styles.ts",[],"D:\\work\\TDW-Framework\\src\\Pages\\AddEditCar\\SelectInputComponent.tsx",[],"D:\\work\\TDW-Framework\\src\\Utils\\helperFunctions.ts",[],{"ruleId":"433","replacedBy":"434"},{"ruleId":"435","replacedBy":"436"},{"ruleId":"437","severity":1,"message":"438","line":13,"column":27,"nodeType":"439","messageId":"440","endLine":13,"endColumn":45},{"ruleId":"437","severity":1,"message":"438","line":12,"column":27,"nodeType":"439","messageId":"440","endLine":12,"endColumn":45},{"ruleId":"437","severity":1,"message":"438","line":12,"column":27,"nodeType":"439","messageId":"440","endLine":12,"endColumn":45},{"ruleId":"437","severity":1,"message":"438","line":13,"column":27,"nodeType":"439","messageId":"440","endLine":13,"endColumn":45},{"ruleId":"441","severity":1,"message":"442","line":31,"column":9,"nodeType":"443","messageId":"444","endLine":31,"endColumn":11},"no-native-reassign",["445"],"no-negated-in-lhs",["446"],"@typescript-eslint/no-unused-vars","'setResponseMessage' is assigned a value but never used.","Identifier","unusedVar","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","no-global-assign","no-unsafe-negation"]