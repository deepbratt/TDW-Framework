[{"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\index.tsx":"1","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\redux\\store.ts":"2","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\App.tsx":"3","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\theme\\theme.ts":"4","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\redux\\reducers\\rootReducer.ts":"5","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\routes\\routes.tsx":"6","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\theme\\globalFontSize.ts":"7","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\theme\\color.ts":"8","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\redux\\reducers\\layoutSlice.ts":"9","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\redux\\reducers\\authSlice.ts":"10","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\routes\\publicRoutes.tsx":"11","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\routes\\privateRoutes.tsx":"12","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\routes\\paths.tsx":"13","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\pages\\signup\\SignupWithMobile.tsx":"14","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\pages\\dashboard\\index.tsx":"15","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\pages\\signup\\SignupWithEmail.tsx":"16","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\index.tsx":"17","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\pages\\carsListing\\index.tsx":"18","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\pages\\postAd\\index.tsx":"19","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\pages\\verificationPage\\index.tsx":"20","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\pages\\AddEditCar\\index.tsx":"21","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\pages\\SearchUsedCars\\index.tsx":"22","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\pages\\carComparision\\index.tsx":"23","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\globalStyles.ts":"24","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\pages\\resetPassword\\index.tsx":"25","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\pages\\signup\\index.tsx":"26","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\pages\\login\\index.tsx":"27","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\pages\\forgetPassword\\index.tsx":"28","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\Utils\\constants\\formsConstants.ts":"29","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\Utils\\constants\\language\\en\\buttonLabels.ts":"30","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\pages\\carDetail\\index.tsx":"31","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\pages\\signup\\useForm.ts":"32","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\pages\\home\\index.tsx":"33","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\pages\\carsListing\\useForm.ts":"34","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\Utils\\constants\\language\\en\\footerData.ts":"35","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\Utils\\constants\\language\\en\\listingData.ts":"36","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\Utils\\constants\\language\\en\\filtersData.ts":"37","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\Utils\\constants\\colors\\colors.ts":"38","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\Utils\\constants\\language\\Text.ts":"39","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\pages\\login\\useForm.ts":"40","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\pages\\resetPassword\\useForm.ts":"41","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\pages\\forgetPassword\\useForm.ts":"42","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\Utils\\constants\\language\\en\\addEditCarData.ts":"43","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\components\\CustomTitle\\CustomTitle.tsx":"44","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\components\\DialogBox\\FullScreenDialog.tsx":"45","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\pages\\AddEditCar\\useAddEditCar.tsx":"46","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\pages\\AddEditCar\\CustomStepperIcon.tsx":"47","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\ListingBanner\\ListBannerContainer.tsx":"48","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\Header\\Header.tsx":"49","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\Utils\\themeConstants.tsx":"50","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\UsedCars\\UsedCarsContainer.tsx":"51","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\Utils\\hooks\\useApi.ts":"52","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\Utils\\hooks\\actions.ts":"53","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\components\\InputField\\index.tsx":"54","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\CarDetail\\useStyles.ts":"55","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Utils\\carDetail.ts":"56","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\CarDetail\\Slider.tsx":"57","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\CarDetail\\CarInformation.tsx":"58","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\components\\index.tsx":"59","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\Utils\\hooks\\endpoints.ts":"60","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\Utils\\regex.ts":"61","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\CarDetail\\CarDetail.tsx":"62","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\Banner\\Banner.tsx":"63","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\sections\\Footer\\index.tsx":"64","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\components\\BreadCrumbs\\index.tsx":"65","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\sections\\VerticalCarFilters\\index.tsx":"66","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\sections\\HorizontalFilters\\index.tsx":"67","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\pages\\AddEditCar\\UploadPhotosForm.tsx":"68","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\pages\\AddEditCar\\CarInformationForm.tsx":"69","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\pages\\AddEditCar\\CarAdditionalInformation.tsx":"70","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\components\\CustomTitle\\style.tsx":"71","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\components\\InputField\\styles.ts":"72","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\PinVerfication\\index.tsx":"73","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\components\\CustomTitle\\Size.tsx":"74","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Utils\\color.constants.tsx":"75","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\Header\\paths.tsx":"76","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\components\\ListingCard\\index.tsx":"77","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\UsedCars\\useStyles.tsx":"78","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\UsedCars\\SlideArr.tsx":"79","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Utils\\usedCarsContent.tsx":"80","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Utils\\carComparision.tsx":"81","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\UsedCars\\SearchFilter\\SearchFilterContainer.tsx":"82","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\components\\CustomButton.tsx":"83","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\components\\Slider\\index.tsx":"84","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\components\\Toast.tsx":"85","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\Header\\Sidebar\\Sidebar.tsx":"86","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\Header\\useStyles.tsx":"87","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\components\\ListingBanner\\ListingBannerContext.tsx":"88","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\CarDetail\\SellerDetail.tsx":"89","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\Banner\\useHooks.tsx":"90","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\sections\\VerticalCarFilters\\styles.ts":"91","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\components\\InputField\\InputFieldWithButton.tsx":"92","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\PinVerfication\\useStyles.ts":"93","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\components\\ListingCard\\styles.ts":"94","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\pages\\AddEditCar\\SelectComponent.tsx":"95","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Utils\\Text.tsx":"96","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\components\\Slider\\styles.ts":"97","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\UsedCars\\mobileViewSlider.tsx":"98","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\Utils\\Breakpoints.tsx":"99","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\components\\convertDate\\index.tsx":"100","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\UsedCars\\SearchFilter\\useStyles.tsx":"101","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\UsedCars\\SearchFilter\\useHook.tsx":"102","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\UsedCars\\SearchFilter\\AdPropertyContext.tsx":"103","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\UsedCars\\SearchFilter\\OtherDetails.tsx":"104","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\UsedCars\\SearchFilter\\SearchFilterContext.tsx":"105","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\Header\\Sidebar\\sidebarStyles.tsx":"106","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\components\\ListingBanner\\useStyles.tsx":"107","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\components\\DialogBox\\index.tsx":"108","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\components\\Dropdown\\index.tsx":"109","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\components\\LayoutToggler\\index.tsx":"110","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\components\\Accordion\\index.tsx":"111","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\components\\Accordion\\styles.ts":"112","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\components\\Dropdown\\styles.ts":"113","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\components\\DialogBox\\DialogBox.tsx":"114","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\sections\\Footer\\styles.ts":"115","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\components\\SearchSelect\\SearchSelect.tsx":"116","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\Banner\\bannerStyles.tsx":"117","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\components\\SearchSelect\\selectStyles.tsx":"118","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\UsedCars\\SlideContainer.tsx":"119","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\Profile\\Routes\\Wrapper.tsx":"120","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\Profile\\Profile.tsx":"121","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\Profile\\Help\\Help.tsx":"122","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\Profile\\ProfileSidebar\\ProfileSideBarContext.tsx":"123","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\Profile\\Favorites.tsx":"124","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\Profile\\Orders\\History.tsx":"125","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\Profile\\Ads\\Ads.tsx":"126","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\Profile\\useStyles.ts":"127","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\Profile\\Help\\useStyles.ts":"128","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\Profile\\Orders\\useStyles.ts":"129","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\Profile\\useHooks.tsx":"130","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\Profile\\DatePicker.tsx":"131","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\Profile\\ProfileSidebar\\Sidebar.tsx":"132","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\Profile\\RegexInputs.tsx":"133","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\Profile\\ProfileSidebar\\sidebarStyles.tsx":"134","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\Profile\\UploadProfile\\ProfileUpload.tsx":"135","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Utils\\sidebarText.tsx":"136","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\Profile\\ChangePassword\\index.tsx":"137","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\Table\\Container.tsx":"138","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\Table\\Table.tsx":"139","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\Table\\useStyles.ts":"140","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\Table\\TableRows.tsx":"141","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\Table\\CollapsedTable\\CollapsedTable.tsx":"142","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\Table\\CollapsedTable\\CollapsedRows.tsx":"143","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\HomeSections\\Category\\CategorySection.tsx":"144","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\HomeSections\\CarComparison\\ComparisonContext.tsx":"145","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\HomeSections\\Category\\useStyles.tsx":"146","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\HomeSections\\CarComparison\\useStyles.tsx":"147"},{"size":360,"mtime":1628109507355,"results":"148","hashOfConfig":"149"},{"size":487,"mtime":1626441297248,"results":"150","hashOfConfig":"149"},{"size":571,"mtime":1628549730709,"results":"151","hashOfConfig":"149"},{"size":2100,"mtime":1628549730813,"results":"152","hashOfConfig":"149"},{"size":254,"mtime":1628549701219,"results":"153","hashOfConfig":"149"},{"size":1069,"mtime":1627308808051,"results":"154","hashOfConfig":"149"},{"size":952,"mtime":1628549701523,"results":"155","hashOfConfig":"149"},{"size":148,"mtime":1628549730813,"results":"156","hashOfConfig":"149"},{"size":462,"mtime":1628549730797,"results":"157","hashOfConfig":"149"},{"size":767,"mtime":1628549701155,"results":"158","hashOfConfig":"149"},{"size":463,"mtime":1628683724387,"results":"159","hashOfConfig":"149"},{"size":796,"mtime":1628684177195,"results":"160","hashOfConfig":"149"},{"size":4569,"mtime":1628799290313,"results":"161","hashOfConfig":"149"},{"size":3972,"mtime":1628549730789,"results":"162","hashOfConfig":"149"},{"size":279,"mtime":1628689089892,"results":"163","hashOfConfig":"149"},{"size":3968,"mtime":1628549730789,"results":"164","hashOfConfig":"149"},{"size":946,"mtime":1628552402197,"results":"165","hashOfConfig":"149"},{"size":7423,"mtime":1628791279810,"results":"166","hashOfConfig":"149"},{"size":436,"mtime":1628549713757,"results":"167","hashOfConfig":"149"},{"size":253,"mtime":1628552357802,"results":"168","hashOfConfig":"149"},{"size":2886,"mtime":1628549700386,"results":"169","hashOfConfig":"149"},{"size":235,"mtime":1628641076319,"results":"170","hashOfConfig":"149"},{"size":443,"mtime":1628799338003,"results":"171","hashOfConfig":"149"},{"size":1019,"mtime":1628549730781,"results":"172","hashOfConfig":"149"},{"size":2386,"mtime":1628549730789,"results":"173","hashOfConfig":"149"},{"size":2324,"mtime":1628549730797,"results":"174","hashOfConfig":"149"},{"size":3660,"mtime":1628549730789,"results":"175","hashOfConfig":"149"},{"size":2629,"mtime":1628549730789,"results":"176","hashOfConfig":"149"},{"size":785,"mtime":1628549730717,"results":"177","hashOfConfig":"149"},{"size":1511,"mtime":1628549730813,"results":"178","hashOfConfig":"149"},{"size":3390,"mtime":1628717095677,"results":"179","hashOfConfig":"149"},{"size":2360,"mtime":1628549730797,"results":"180","hashOfConfig":"149"},{"size":688,"mtime":1628858569472,"results":"181","hashOfConfig":"149"},{"size":3638,"mtime":1628549730781,"results":"182","hashOfConfig":"149"},{"size":2474,"mtime":1626441297263,"results":"183","hashOfConfig":"149"},{"size":495,"mtime":1628549730725,"results":"184","hashOfConfig":"149"},{"size":2170,"mtime":1628549730717,"results":"185","hashOfConfig":"149"},{"size":426,"mtime":1628810969321,"results":"186","hashOfConfig":"149"},{"size":1487,"mtime":1628549713549,"results":"187","hashOfConfig":"149"},{"size":2030,"mtime":1628549730789,"results":"188","hashOfConfig":"149"},{"size":1963,"mtime":1628549730789,"results":"189","hashOfConfig":"149"},{"size":1927,"mtime":1628549730789,"results":"190","hashOfConfig":"149"},{"size":1960,"mtime":1628549693319,"results":"191","hashOfConfig":"149"},{"size":1229,"mtime":1626104823405,"results":"192","hashOfConfig":"149"},{"size":2164,"mtime":1628549730765,"results":"193","hashOfConfig":"149"},{"size":7310,"mtime":1628549700386,"results":"194","hashOfConfig":"149"},{"size":1731,"mtime":1628549700378,"results":"195","hashOfConfig":"149"},{"size":607,"mtime":1628549694415,"results":"196","hashOfConfig":"149"},{"size":2273,"mtime":1628549694007,"results":"197","hashOfConfig":"149"},{"size":513,"mtime":1628549693327,"results":"198","hashOfConfig":"149"},{"size":2353,"mtime":1628775737142,"results":"199","hashOfConfig":"149"},{"size":5628,"mtime":1628817933461,"results":"200","hashOfConfig":"149"},{"size":1866,"mtime":1628779563729,"results":"201","hashOfConfig":"149"},{"size":894,"mtime":1628549731445,"results":"202","hashOfConfig":"149"},{"size":4006,"mtime":1627915131031,"results":"203","hashOfConfig":"149"},{"size":2705,"mtime":1628712668245,"results":"204","hashOfConfig":"149"},{"size":3982,"mtime":1628712828415,"results":"205","hashOfConfig":"149"},{"size":3184,"mtime":1628467221981,"results":"206","hashOfConfig":"149"},{"size":604,"mtime":1628549693671,"results":"207","hashOfConfig":"149"},{"size":614,"mtime":1628793047527,"results":"208","hashOfConfig":"149"},{"size":939,"mtime":1628549730757,"results":"209","hashOfConfig":"149"},{"size":4122,"mtime":1628633047487,"results":"210","hashOfConfig":"149"},{"size":2831,"mtime":1628628836262,"results":"211","hashOfConfig":"149"},{"size":7209,"mtime":1628549730877,"results":"212","hashOfConfig":"149"},{"size":1748,"mtime":1628549730765,"results":"213","hashOfConfig":"149"},{"size":24690,"mtime":1628549730805,"results":"214","hashOfConfig":"149"},{"size":1568,"mtime":1628549730805,"results":"215","hashOfConfig":"149"},{"size":3566,"mtime":1628549700378,"results":"216","hashOfConfig":"149"},{"size":4624,"mtime":1628549700370,"results":"217","hashOfConfig":"149"},{"size":4700,"mtime":1628549700370,"results":"218","hashOfConfig":"149"},{"size":786,"mtime":1628549731765,"results":"219","hashOfConfig":"149"},{"size":642,"mtime":1628549730765,"results":"220","hashOfConfig":"149"},{"size":2269,"mtime":1628553163750,"results":"221","hashOfConfig":"149"},{"size":256,"mtime":1628549693503,"results":"222","hashOfConfig":"149"},{"size":459,"mtime":1628549713621,"results":"223","hashOfConfig":"149"},{"size":280,"mtime":1628549694303,"results":"224","hashOfConfig":"149"},{"size":5531,"mtime":1628812875708,"results":"225","hashOfConfig":"149"},{"size":2082,"mtime":1628716606895,"results":"226","hashOfConfig":"149"},{"size":3901,"mtime":1628720878340,"results":"227","hashOfConfig":"149"},{"size":5678,"mtime":1628818559485,"results":"228","hashOfConfig":"149"},{"size":442,"mtime":1628800335812,"results":"229","hashOfConfig":"149"},{"size":1872,"mtime":1628609578201,"results":"230","hashOfConfig":"149"},{"size":1160,"mtime":1628549713565,"results":"231","hashOfConfig":"149"},{"size":718,"mtime":1628549731437,"results":"232","hashOfConfig":"149"},{"size":657,"mtime":1628549713605,"results":"233","hashOfConfig":"149"},{"size":1892,"mtime":1628549694039,"results":"234","hashOfConfig":"149"},{"size":1587,"mtime":1628549694415,"results":"235","hashOfConfig":"149"},{"size":1441,"mtime":1628549713597,"results":"236","hashOfConfig":"149"},{"size":487,"mtime":1628712674196,"results":"237","hashOfConfig":"149"},{"size":361,"mtime":1628549713621,"results":"238","hashOfConfig":"149"},{"size":143,"mtime":1628549730805,"results":"239","hashOfConfig":"149"},{"size":1559,"mtime":1628549731445,"results":"240","hashOfConfig":"149"},{"size":1202,"mtime":1628551965131,"results":"241","hashOfConfig":"149"},{"size":2127,"mtime":1628809504709,"results":"242","hashOfConfig":"149"},{"size":471,"mtime":1628549700378,"results":"243","hashOfConfig":"149"},{"size":1903,"mtime":1628552241823,"results":"244","hashOfConfig":"149"},{"size":533,"mtime":1628549731437,"results":"245","hashOfConfig":"149"},{"size":1893,"mtime":1628553082676,"results":"246","hashOfConfig":"149"},{"size":249,"mtime":1628549693319,"results":"247","hashOfConfig":"149"},{"size":211,"mtime":1628549713613,"results":"248","hashOfConfig":"149"},{"size":2533,"mtime":1626984125040,"results":"249","hashOfConfig":"149"},{"size":920,"mtime":1628723582750,"results":"250","hashOfConfig":"149"},{"size":3968,"mtime":1628819549038,"results":"251","hashOfConfig":"149"},{"size":5175,"mtime":1628637703968,"results":"252","hashOfConfig":"149"},{"size":13050,"mtime":1628637714590,"results":"253","hashOfConfig":"149"},{"size":910,"mtime":1628549694287,"results":"254","hashOfConfig":"149"},{"size":1151,"mtime":1628549713597,"results":"255","hashOfConfig":"149"},{"size":824,"mtime":1628549730765,"results":"256","hashOfConfig":"149"},{"size":1102,"mtime":1628549730765,"results":"257","hashOfConfig":"149"},{"size":1317,"mtime":1628549730773,"results":"258","hashOfConfig":"149"},{"size":849,"mtime":1628549731765,"results":"259","hashOfConfig":"149"},{"size":178,"mtime":1628549731765,"results":"260","hashOfConfig":"149"},{"size":515,"mtime":1628549731445,"results":"261","hashOfConfig":"149"},{"size":1038,"mtime":1628549730765,"results":"262","hashOfConfig":"149"},{"size":1186,"mtime":1628549730877,"results":"263","hashOfConfig":"149"},{"size":3636,"mtime":1628549713605,"results":"264","hashOfConfig":"149"},{"size":775,"mtime":1628550853878,"results":"265","hashOfConfig":"149"},{"size":1454,"mtime":1628549713605,"results":"266","hashOfConfig":"149"},{"size":1317,"mtime":1628720668705,"results":"267","hashOfConfig":"149"},{"size":1294,"mtime":1628532741851,"results":"268","hashOfConfig":"149"},{"size":6027,"mtime":1628817574363,"results":"269","hashOfConfig":"149"},{"size":1613,"mtime":1628817759212,"results":"270","hashOfConfig":"149"},{"size":1840,"mtime":1628532672375,"results":"271","hashOfConfig":"149"},{"size":3034,"mtime":1628810591278,"results":"272","hashOfConfig":"149"},{"size":3347,"mtime":1628817773336,"results":"273","hashOfConfig":"149"},{"size":2469,"mtime":1628812966599,"results":"274","hashOfConfig":"149"},{"size":3553,"mtime":1628816805878,"results":"275","hashOfConfig":"149"},{"size":1145,"mtime":1628107962966,"results":"276","hashOfConfig":"149"},{"size":1410,"mtime":1628098884837,"results":"277","hashOfConfig":"149"},{"size":1350,"mtime":1628698680636,"results":"278","hashOfConfig":"149"},{"size":503,"mtime":1628722870618,"results":"279","hashOfConfig":"149"},{"size":2037,"mtime":1628817816536,"results":"280","hashOfConfig":"149"},{"size":2427,"mtime":1628817737935,"results":"281","hashOfConfig":"149"},{"size":1575,"mtime":1628112917337,"results":"282","hashOfConfig":"149"},{"size":1575,"mtime":1628284439634,"results":"283","hashOfConfig":"149"},{"size":3388,"mtime":1628814886153,"results":"284","hashOfConfig":"149"},{"size":4125,"mtime":1628817432396,"results":"285","hashOfConfig":"149"},{"size":1283,"mtime":1628800540635,"results":"286","hashOfConfig":"149"},{"size":1987,"mtime":1628790329926,"results":"287","hashOfConfig":"149"},{"size":1074,"mtime":1628612197902,"results":"288","hashOfConfig":"149"},{"size":2233,"mtime":1628800070576,"results":"289","hashOfConfig":"149"},{"size":1224,"mtime":1628800491624,"results":"290","hashOfConfig":"149"},{"size":2303,"mtime":1628790277830,"results":"291","hashOfConfig":"149"},{"size":2040,"mtime":1628858510726,"results":"292","hashOfConfig":"149"},{"size":4200,"mtime":1628858489635,"results":"293","hashOfConfig":"149"},{"size":665,"mtime":1626969454706,"results":"294","hashOfConfig":"149"},{"size":1325,"mtime":1627244268878,"results":"295","hashOfConfig":"149"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},"1h0njqx",{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"311","messages":"312","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"325","messages":"326","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"333","usedDeprecatedRules":"298"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"336","messages":"337","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"344","messages":"345","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"346","messages":"347","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"348","messages":"349","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"350","messages":"351","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"352","messages":"353","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"354","messages":"355","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"356","messages":"357","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"360","usedDeprecatedRules":"298"},{"filePath":"361","messages":"362","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"363","messages":"364","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"365","messages":"366","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"367","usedDeprecatedRules":"298"},{"filePath":"368","messages":"369","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"370","messages":"371","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"372","messages":"373","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"374","messages":"375","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"376","messages":"377","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"378","messages":"379","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"380","messages":"381","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"382","usedDeprecatedRules":"298"},{"filePath":"383","messages":"384","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"385","usedDeprecatedRules":"298"},{"filePath":"386","messages":"387","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"388","messages":"389","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"390","messages":"391","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"392","messages":"393","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"394","messages":"395","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"396","messages":"397","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"398","messages":"399","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"400","messages":"401","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"402","messages":"403","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"404","usedDeprecatedRules":"298"},{"filePath":"405","messages":"406","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"407","usedDeprecatedRules":"298"},{"filePath":"408","messages":"409","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"410","messages":"411","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"412","messages":"413","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"414","messages":"415","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"416","messages":"417","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"418","messages":"419","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"420","messages":"421","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"422","messages":"423","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"424","messages":"425","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"426","messages":"427","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"428","messages":"429","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"430","messages":"431","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"432","messages":"433","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"434","messages":"435","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"436","usedDeprecatedRules":"298"},{"filePath":"437","messages":"438","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"439","messages":"440","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"441","messages":"442","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"443","messages":"444","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"445","messages":"446","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"447","messages":"448","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"449","messages":"450","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"451","messages":"452","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"453","messages":"454","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"455","messages":"456","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"457","messages":"458","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"459","usedDeprecatedRules":"298"},{"filePath":"460","messages":"461","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"462","messages":"463","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"464","messages":"465","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"466","messages":"467","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"468","messages":"469","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"470","messages":"471","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"472","messages":"473","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"474","messages":"475","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"476","messages":"477","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"478","messages":"479","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"480","messages":"481","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"482","messages":"483","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"484","messages":"485","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"486","messages":"487","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"488","messages":"489","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"490","messages":"491","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"492","messages":"493","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"494","usedDeprecatedRules":"298"},{"filePath":"495","messages":"496","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"497","messages":"498","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"499","messages":"500","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"501","messages":"502","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"503","messages":"504","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"505","messages":"506","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"507","messages":"508","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"509","messages":"510","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"511","messages":"512","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"513","usedDeprecatedRules":"298"},{"filePath":"514","messages":"515","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"516","usedDeprecatedRules":"298"},{"filePath":"517","messages":"518","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"519","usedDeprecatedRules":"298"},{"filePath":"520","messages":"521","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"522","messages":"523","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"524","messages":"525","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"526","messages":"527","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"528","messages":"529","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"530","messages":"531","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"532","messages":"533","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"534","messages":"535","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"536","messages":"537","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"538","messages":"539","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"540","messages":"541","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"542","messages":"543","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"544","messages":"545","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"546","messages":"547","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"548","messages":"549","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"550","messages":"551","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"552","usedDeprecatedRules":"298"},{"filePath":"553","messages":"554","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"555","messages":"556","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"557","messages":"558","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"559","usedDeprecatedRules":"298"},{"filePath":"560","messages":"561","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"562","usedDeprecatedRules":"298"},{"filePath":"563","messages":"564","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"565","usedDeprecatedRules":"298"},{"filePath":"566","messages":"567","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"568","messages":"569","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"570","usedDeprecatedRules":"298"},{"filePath":"571","messages":"572","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"573","messages":"574","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"575","messages":"576","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"577","messages":"578","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"579","messages":"580","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"581","messages":"582","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"583","messages":"584","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"585","usedDeprecatedRules":"298"},{"filePath":"586","messages":"587","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"588","usedDeprecatedRules":"298"},{"filePath":"589","messages":"590","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"591","messages":"592","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"593","usedDeprecatedRules":"298"},{"filePath":"594","messages":"595","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"596","messages":"597","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"598","messages":"599","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"600","messages":"601","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"298"},{"filePath":"602","messages":"603","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"604","usedDeprecatedRules":"298"},{"filePath":"605","messages":"606","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"607","messages":"608","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"609","messages":"610","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"611","messages":"612","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\index.tsx",[],["613","614"],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\redux\\store.ts",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\App.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\theme\\theme.ts",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\redux\\reducers\\rootReducer.ts",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\routes\\routes.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\theme\\globalFontSize.ts",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\theme\\color.ts",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\redux\\reducers\\layoutSlice.ts",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\redux\\reducers\\authSlice.ts",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\routes\\publicRoutes.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\routes\\privateRoutes.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\routes\\paths.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\pages\\signup\\SignupWithMobile.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\pages\\dashboard\\index.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\pages\\signup\\SignupWithEmail.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\index.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\pages\\carsListing\\index.tsx",["615","616","617"],"import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport {\r\n  Chip,\r\n  RadioGroup,\r\n  Radio,\r\n  FormControlLabel,\r\n  DialogContent,\r\n  DialogActions,\r\n  Button,\r\n  Grid,\r\n  Hidden,\r\n  SwipeableDrawer,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport FilterListRoundedIcon from \"@material-ui/icons/FilterListRounded\";\r\nimport ListingCard from \"../../components/ListingCard\";\r\nimport BreadCrumbs from \"../../components/BreadCrumbs\";\r\nimport CarFilters from \"../../sections/VerticalCarFilters\";\r\nimport { SortRounded } from \"@material-ui/icons\";\r\nimport HorizontalFilters from \"../../sections/HorizontalFilters\";\r\nimport {\r\n  CarsListingData,\r\n  LISTING_PAGE_HEADER,\r\n} from \"../../Utils/constants/language/en/listingData\";\r\nimport { sortingOptions } from \"../../Utils/constants/language/en/filtersData\";\r\nimport {\r\n  APPLY_FILTERS,\r\n  SHOW_RESULT,\r\n} from \"../../Utils/constants/language/en/buttonLabels\";\r\nimport FullScreenDialog from \"../../components/DialogBox/FullScreenDialog\";\r\nimport { useForm } from \"./useForm\";\r\nimport { fieldNames } from \"../../Utils/constants/formsConstants\";\r\nimport CustomTitle from \"../../components/CustomTitle/CustomTitle\";\r\nimport { Color } from \"../../theme/color\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useEffect } from \"react\";\r\n\r\nexport interface CarsListingProps {}\r\n\r\nconst CarsListing: React.FC<CarsListingProps> = () => {\r\n  const { values, handleInputChange } = useForm();\r\n  const {model,city} = useParams<any>()\r\n  const [open, setOpen] = React.useState(false);\r\n  const [sortDrawerOpen, setSortDrawerOpen] = React.useState(false);\r\n\r\n  const toggleDrawer = () => {\r\n    setSortDrawerOpen(sortDrawerOpen ? false : true);\r\n  };\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const layoutType = useSelector(\r\n    (state: any) => state.persistedReducer.layout.layoutType\r\n  );\r\n\r\n useEffect(() => {\r\n  console.log(model,city)\r\n }, [model,city])\r\n  return (\r\n    <Grid container justify=\"center\">\r\n      <Grid item container xs={12} lg={10} spacing={3}>\r\n        <Grid item xs={12}>\r\n          <CustomTitle\r\n            color={Color.textPrimary}\r\n            text={`${LISTING_PAGE_HEADER} (0000)`}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <BreadCrumbs />\r\n        </Grid>\r\n        <Grid xs={12} md={4} item container>\r\n          <Hidden smDown>\r\n            <Grid item xs={12}>\r\n              <div\r\n                style={{\r\n                  padding: \"20px 15px\",\r\n                  margin: \"10px 0\",\r\n                  backgroundColor: \"#092C4C\",\r\n                }}\r\n              >\r\n                <Typography style={{ color: \"white\" }} variant=\"h4\">\r\n                  {SHOW_RESULT}\r\n                </Typography>\r\n              </div>\r\n              <CarFilters />\r\n            </Grid>\r\n          </Hidden>\r\n        </Grid>\r\n        <Grid\r\n          item\r\n          container\r\n          xs={12}\r\n          md={8}\r\n          alignContent=\"flex-start\"\r\n          spacing={2}\r\n        >\r\n          <Hidden mdUp>\r\n            <Grid item container justify=\"space-between\" xs={12} spacing={2}>\r\n              <Grid item>\r\n                <Typography variant=\"h3\">Results: 04</Typography>\r\n              </Grid>\r\n              <Grid item container xs={6} spacing={1} justify=\"flex-end\">\r\n                <Grid item>\r\n                  <Chip\r\n                    variant=\"outlined\"\r\n                    size=\"small\"\r\n                    icon={<FilterListRoundedIcon color=\"secondary\" />}\r\n                    label=\"Filters\"\r\n                    clickable\r\n                    color=\"secondary\"\r\n                    onClick={() => handleClickOpen()}\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <Hidden smUp>\r\n                    <Chip\r\n                      variant=\"outlined\"\r\n                      size=\"small\"\r\n                      icon={<SortRounded color=\"secondary\" />}\r\n                      label=\"Sort\"\r\n                      clickable\r\n                      color=\"secondary\"\r\n                      onClick={() => toggleDrawer()}\r\n                    />\r\n                  </Hidden>\r\n                </Grid>\r\n              </Grid>\r\n              <FullScreenDialog\r\n                title=\"Filters\"\r\n                open={open}\r\n                handleClose={handleClose}\r\n              >\r\n                <CarFilters />\r\n              </FullScreenDialog>\r\n              <SwipeableDrawer\r\n                style={{\r\n                  borderTopLeftRadius: \"5px\",\r\n                  borderTopRightRadius: \"5px\",\r\n                }}\r\n                elevation={20}\r\n                anchor=\"bottom\"\r\n                open={sortDrawerOpen}\r\n                onClose={toggleDrawer}\r\n                onOpen={toggleDrawer}\r\n              >\r\n                <DialogContent>\r\n                  <Typography variant=\"h3\" gutterBottom>\r\n                    Sorting Options\r\n                  </Typography>\r\n                  <RadioGroup\r\n                    aria-label=\"sortingOptions\"\r\n                    value={values.sortingOptions}\r\n                    name={fieldNames.sortingOptions}\r\n                    onChange={handleInputChange}\r\n                  >\r\n                    {sortingOptions.map((option) => (\r\n                      <FormControlLabel\r\n                        key={`sorting-option-${option.value}`}\r\n                        value={option.value}\r\n                        control={<Radio size=\"small\" />}\r\n                        label={option.label}\r\n                      />\r\n                    ))}\r\n                  </RadioGroup>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                  <Button color=\"secondary\" onClick={toggleDrawer}>\r\n                    {APPLY_FILTERS}\r\n                  </Button>\r\n                </DialogActions>\r\n              </SwipeableDrawer>\r\n            </Grid>\r\n          </Hidden>\r\n          <Hidden xsDown>\r\n            <Grid item xs={12}>\r\n              <HorizontalFilters />\r\n            </Grid>\r\n          </Hidden>\r\n          {/* <Grid item container xs={12} spacing={1}>\r\n            <Grid\r\n              item\r\n              xs={12}\r\n              sm={layoutType === \"list\" ? 12 : 6}\r\n              xl={layoutType === \"list\" ? 12 : 6}\r\n            >\r\n              <ListingCard data={CarsListingData} layoutType={layoutType} />\r\n            </Grid>\r\n            <Grid\r\n              item\r\n              xs={12}\r\n              sm={layoutType === \"list\" ? 12 : 6}\r\n              xl={layoutType === \"list\" ? 12 : 6}\r\n            >\r\n              <ListingCard data={CarsListingData} layoutType={layoutType} />\r\n            </Grid>\r\n            <Grid\r\n              item\r\n              xs={12}\r\n              sm={layoutType === \"list\" ? 12 : 6}\r\n              xl={layoutType === \"list\" ? 12 : 6}\r\n            >\r\n              <ListingCard data={CarsListingData} layoutType={layoutType} />\r\n            </Grid>\r\n            <Grid\r\n              item\r\n              xs={12}\r\n              sm={layoutType === \"list\" ? 12 : 6}\r\n              xl={layoutType === \"list\" ? 12 : 6}\r\n            >\r\n              <ListingCard data={CarsListingData} layoutType={layoutType} />\r\n            </Grid>\r\n          </Grid> */}\r\n        </Grid>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default CarsListing;\r\n","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\pages\\postAd\\index.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\pages\\verificationPage\\index.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\pages\\AddEditCar\\index.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\pages\\SearchUsedCars\\index.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\pages\\carComparision\\index.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\globalStyles.ts",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\pages\\resetPassword\\index.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\pages\\signup\\index.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\pages\\login\\index.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\pages\\forgetPassword\\index.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\Utils\\constants\\formsConstants.ts",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\Utils\\constants\\language\\en\\buttonLabels.ts",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\pages\\carDetail\\index.tsx",["618"],"import CarDetail from \"../../layout/Sections/Sections/CarDetail/CarDetail\";\r\nimport { Grid, Hidden } from \"@material-ui/core\";\r\nimport {\r\n  Title,\r\n  rating,\r\n  mainButton,\r\n  numButton,\r\n  desc,\r\n  array,\r\n  locIcon,\r\n  mailIcon,\r\n  ratIcon,\r\n  numbIcon,\r\n  arr,\r\n  CarInfo,\r\n  CarFeature,\r\n  carTitle,\r\n} from \"../../layout/Sections/Utils/carDetail\";\r\nimport Section from \"../../components/index\";\r\nimport Slides from \"../../layout/Sections/Sections/CarDetail/Slider\";\r\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\";\r\nimport { useStyles } from \"../../layout/Sections/Sections/CarDetail/useStyles\";\r\nimport CarInformation from \"../../layout/Sections/Sections/CarDetail/CarInformation\";\r\nimport { getSingleCar } from \"../../Utils/hooks/endpoints\";\r\nimport { useEffect } from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport useApi from \"../../Utils/hooks/useApi\"\r\n\r\ninterface RouteProps {\r\n  id: string;\r\n}\r\nconst CarDetailContainer = () => {\r\n  const {loadSingleData,isLoading,obj} = useApi()\r\n  const { main } = useStyles();\r\n  const { id } = useParams<RouteProps>();\r\n\r\n  useEffect(() => {\r\n    loadSingleData(getSingleCar,id);\r\n  }, []);\r\n\r\n\r\n  return (\r\n    <Grid style={{ display: \"flex\", justifyContent: \"center\" }} container>\r\n      <Section>\r\n        {isLoading || !obj ? (\r\n          <h1>Loading...</h1>\r\n        ) : (\r\n          <>\r\n            <Grid className={main} item xs={12}>\r\n              <Slides\r\n                carTitle={carTitle}\r\n                info={CarInfo}\r\n                feature={CarFeature}\r\n                desc={desc}\r\n                paragraph={obj?.description}\r\n                arr={arr}\r\n                id={obj?._id}\r\n                city={obj?.registeredCity}\r\n                assembly={obj?.assembly}\r\n                color={obj?.bodyColor}\r\n                bodyType={obj?.bodyType}\r\n                engineCapacity={obj?.engineCapacity}\r\n                date={obj.date}\r\n                isFavs={obj.isFav}\r\n              />\r\n              <CarDetail\r\n                mainButton={mainButton}\r\n                numButton={numButton}\r\n                Title={Title}\r\n                location={obj?.city}\r\n                rating={rating}\r\n                array={array}\r\n                locIcon={locIcon}\r\n                mailIcon={mailIcon}\r\n                ratIcon={ratIcon}\r\n                numbIcon={numbIcon}\r\n                paragraph={obj?.description}\r\n                desc={desc}\r\n                price={obj?.price}\r\n                year={obj?.year}\r\n                transmission={obj?.transmission}\r\n                mileage={obj?.milage}\r\n                engineType={obj?.engineType}\r\n              />\r\n            </Grid>\r\n            <Hidden lgUp>\r\n              <Grid item xs={12}>\r\n                <CarInformation\r\n                  carTitle={carTitle}\r\n                  info={CarInfo}\r\n                  // feature={data?.features}\r\n                  feature={CarFeature}\r\n                  city={obj?.registeredCity}\r\n                  assembly={obj?.assembly}\r\n                  color={obj?.bodyColor}\r\n                  bodyType={obj?.bodyType}\r\n                  engineCapacity={obj?.engineCapacity}\r\n                  date={obj.date}\r\n                />\r\n              </Grid>\r\n            </Hidden>\r\n          </>\r\n        )}\r\n      </Section>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default CarDetailContainer;\r\n","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\pages\\signup\\useForm.ts",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\pages\\home\\index.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\pages\\carsListing\\useForm.ts",["619","620"],"import React, { useState, useEffect } from \"react\";\r\nimport { fieldNames, messages } from \"../../Utils/constants/formsConstants\";\r\n\r\nconst initialValues: any = {\r\n  keywords: \"\",\r\n  priceFrom: 0,\r\n  priceTo: 0,\r\n  priceRange: [0, 50000000],\r\n  yearFrom: 0,\r\n  yearTo: 0,\r\n  yearRange: [1900, 2021],\r\n  province: [],\r\n  city: [],\r\n  mileageFrom: 0,\r\n  mileageTo: 0,\r\n  registrationCity: [],\r\n  mileageRange: [0, 1000000],\r\n  transmission: [],\r\n  engineType: [],\r\n  engineCapacityFrom: 0,\r\n  engineCapacityTo: 0,\r\n  engineCapacityRange: [600, 30000],\r\n  color: [],\r\n  bodyType: [],\r\n  pictireAvailability: false,\r\n  videoAvailability: false,\r\n  sellerType: [],\r\n  adType: [],\r\n  sortingOptions: \"\",\r\n};\r\n\r\nexport const useForm = (validateOnChange = true) => {\r\n  const [values, setValues] = useState(initialValues);\r\n  const [errors, setErrors] = useState(initialValues);\r\n  const [appliedFilters, setAppliedFilters] = useState<any>([]);\r\n  // const [responseMessage, setResponseMessage] = useState(\"\");\r\n  // const [isLoading, setIsLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    console.info(\"APPLIED FILTERS\", appliedFilters);\r\n  }, [appliedFilters]);\r\n\r\n  const validate = (fieldValues = values) => {\r\n    let temp = { ...errors };\r\n\r\n    setErrors({\r\n      ...temp,\r\n    });\r\n\r\n    if (fieldValues === values)\r\n      return Object.values(temp).every((x) => x === \"\");\r\n  };\r\n\r\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { name, value } = e.target;\r\n\r\n    setValues({\r\n      ...values,\r\n      [name]: value,\r\n    });\r\n    if (validateOnChange) validate({ [name]: value });\r\n    if (values[name] !== value) {\r\n      if (!appliedFilters.includes(name)) {\r\n        setAppliedFilters([...appliedFilters, name]);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleCheckboxChange = (\r\n    e: React.ChangeEvent<HTMLInputElement>,\r\n    filterName: string\r\n  ) => {\r\n    let temp = values[filterName];\r\n    if (e.target.checked) {\r\n      temp.push(e.target.name);\r\n    } else {\r\n      temp = temp.filter((item: string) => item !== e.target.name);\r\n    }\r\n    setValues({ ...values, [filterName]: temp });\r\n    if (e.target.checked) {\r\n      if (!appliedFilters.includes(filterName)) {\r\n        setAppliedFilters([...appliedFilters, filterName]);\r\n      }\r\n    }\r\n    if (!e.target.checked) {\r\n      removeFilter(filterName);\r\n    }\r\n  };\r\n\r\n  const handleSingleCheckBoxChange = (\r\n    e: React.ChangeEvent<HTMLInputElement>\r\n  ) => {\r\n    const { name, checked } = e.target;\r\n\r\n    setValues({\r\n      ...values,\r\n      [name]: checked,\r\n    });\r\n    if (validateOnChange) validate({ [name]: checked });\r\n    if (e.target.checked) {\r\n      if (!appliedFilters.includes(name)) {\r\n        setAppliedFilters([...appliedFilters, name]);\r\n      }\r\n    }\r\n    if (!e.target.checked) {\r\n      removeFilter(name);\r\n    }\r\n  };\r\n\r\n  const removeFilter = (filterName: string) => {\r\n    setAppliedFilters(\r\n      appliedFilters.filter((filter: string) => filter !== filterName)\r\n    );\r\n    setValues((values: any) => {\r\n      values[filterName] = initialValues[filterName];\r\n      return { ...values };\r\n    });\r\n  };\r\n\r\n  const resetForm = () => {\r\n    setValues(initialValues);\r\n    setErrors({});\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    console.log(\"btn clicked\", values);\r\n  };\r\n\r\n  return {\r\n    values,\r\n    setValues,\r\n    errors,\r\n    setErrors,\r\n    handleInputChange,\r\n    handleCheckboxChange,\r\n    handleSingleCheckBoxChange,\r\n    appliedFilters,\r\n    setAppliedFilters,\r\n    removeFilter,\r\n    resetForm,\r\n    validate,\r\n    handleSubmit,\r\n    // isLoading,\r\n    // responseMessage,\r\n  };\r\n};\r\n","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\Utils\\constants\\language\\en\\footerData.ts",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\Utils\\constants\\language\\en\\listingData.ts",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\Utils\\constants\\language\\en\\filtersData.ts",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\Utils\\constants\\colors\\colors.ts",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\Utils\\constants\\language\\Text.ts",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\pages\\login\\useForm.ts",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\pages\\resetPassword\\useForm.ts",["621"],"import { useState } from \"react\";\r\nimport { fieldNames, messages } from \"../../Utils/constants/formsConstants\";\r\n\r\nconst initialValues: any = {\r\n  password: \"\",\r\n  confirmPassword: \"\",\r\n};\r\n\r\nexport const useForm = (token: any, validateOnChange = false) => {\r\n  const [values, setValues] = useState(initialValues);\r\n  const [errors, setErrors] = useState(initialValues);\r\n  const [responseMessage, setResponseMessage] = useState(\"\");\r\n\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const validate = (fieldValues = values) => {\r\n    let temp = { ...errors };\r\n\r\n    if (fieldNames.password in fieldValues) {\r\n      temp.password = fieldValues.password.length < 5 ? messages.password : \"\";\r\n    }\r\n    if (fieldNames.confirmPassword in fieldValues) {\r\n      temp.confirmPassword =\r\n        fieldValues.confirmPassword !== fieldValues.password\r\n          ? messages.notMatch\r\n          : \"\";\r\n    }\r\n\r\n    setErrors({\r\n      ...temp,\r\n    });\r\n\r\n    if (fieldValues === values)\r\n      return Object.values(temp).every((x) => x === \"\");\r\n  };\r\n\r\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { name, value } = e.target;\r\n\r\n    setValues({\r\n      ...values,\r\n      [name]: value,\r\n    });\r\n    if (validateOnChange) validate({ [name]: value });\r\n  };\r\n\r\n  const resetForm = () => {\r\n    setValues(initialValues);\r\n    setErrors({});\r\n  };\r\n\r\n  const handleSubmit = async (e: any) => {\r\n    e.preventDefault();\r\n    console.log(\"btn clicked\", values);\r\n    if (validate()) {\r\n      setIsLoading(true);\r\n      console.log(values, token);\r\n      let requestBody = {\r\n        password: values.password,\r\n        passwordConfirm: values.confirmPassword,\r\n      };\r\n      console.log(\"request Body\", requestBody);\r\n    }\r\n  };\r\n\r\n  return {\r\n    values,\r\n    setValues,\r\n    errors,\r\n    setErrors,\r\n    handleInputChange,\r\n    resetForm,\r\n    validate,\r\n    handleSubmit,\r\n    isLoading,\r\n    responseMessage,\r\n  };\r\n};\r\n","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\pages\\forgetPassword\\useForm.ts",["622"],"import { useState } from \"react\";\r\nimport { messages, fieldNames } from \"../../Utils/constants/formsConstants\";\r\nimport { isEmailValid } from \"../../Utils/regex\";\r\n\r\nconst initialValues: any = {\r\n  email: \"\",\r\n};\r\n\r\nexport const useForm = (validateOnChange = false) => {\r\n  const [values, setValues] = useState(initialValues);\r\n  const [errors, setErrors] = useState(initialValues);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [responseMessage, setResponseMessage] = useState(\"\");\r\n  const [resetLinkMessage, setResetLinkMessage] = useState(\"\");\r\n\r\n  const validate = (fieldValues = values) => {\r\n    let temp = { ...errors };\r\n\r\n    if (fieldNames.email in fieldValues) {\r\n      temp.email =\r\n        fieldValues.email.trim() === \"\"\r\n          ? messages.isRequired\r\n          : isEmailValid(fieldValues.email)\r\n          ? \"\"\r\n          : messages.notValid;\r\n    }\r\n\r\n    setErrors({\r\n      ...temp,\r\n    });\r\n\r\n    if (fieldValues === values)\r\n      return Object.values(temp).every((x) => x === \"\");\r\n  };\r\n\r\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { name, value } = e.target;\r\n\r\n    setValues({\r\n      ...values,\r\n      [name]: value,\r\n    });\r\n    if (validateOnChange) validate({ [name]: value });\r\n  };\r\n\r\n  const resetForm = () => {\r\n    setValues(initialValues);\r\n    setErrors({});\r\n  };\r\n\r\n  const handleSubmit = async (e: any) => {\r\n    e.preventDefault();\r\n    console.log(\"btn clicked\", values);\r\n    if (validate()) {\r\n      setIsLoading(true);\r\n      console.log(values);\r\n      let requestBody = {\r\n        email: values.email,\r\n      };\r\n      console.log(\"request body,\", requestBody);\r\n    }\r\n  };\r\n\r\n  return {\r\n    values,\r\n    setValues,\r\n    errors,\r\n    setErrors,\r\n    handleInputChange,\r\n    resetForm,\r\n    validate,\r\n    handleSubmit,\r\n    isLoading,\r\n    resetLinkMessage,\r\n    responseMessage,\r\n    setResetLinkMessage,\r\n  };\r\n};\r\n","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\Utils\\constants\\language\\en\\addEditCarData.ts",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\components\\CustomTitle\\CustomTitle.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\components\\DialogBox\\FullScreenDialog.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\pages\\AddEditCar\\useAddEditCar.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\pages\\AddEditCar\\CustomStepperIcon.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\ListingBanner\\ListBannerContainer.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\Header\\Header.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\Utils\\themeConstants.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\UsedCars\\UsedCarsContainer.tsx",["623"],"import { Grid, Typography, Button } from \"@material-ui/core\";\r\nimport {\r\n  usedCarsTitle,\r\n  arrowleft,\r\n  arrowright,\r\n} from \"../../Utils/usedCarsContent\";\r\nimport useStyles from \"./useStyles\";\r\nimport { Colors } from \"../../Utils/color.constants\";\r\nimport Section from \"../../../../components/index\";\r\nimport { useEffect } from \"react\";\r\nimport SearchFilterContainer from \"./SearchFilter/SearchFilterContainer\";\r\nimport useApi from \"../../../../Utils/hooks/useApi\";\r\nimport { getLimitedCars } from \"../../../../Utils/hooks/endpoints\";\r\nimport SlideContainer from \"./SlideContainer\";\r\n// import ComparisonContext from \"../HomeSections/CarComparison/ComparisonContext\";\r\n\r\nconst UsedCarsContainer = () => {\r\n  const { root, btn, heading } = useStyles();\r\n  const { black, iceBlue, red } = Colors;\r\n  const { loadAllData, data, isLoading } = useApi();\r\n\r\n  useEffect(() => {\r\n    loadAllData(getLimitedCars,1);\r\n  }, []);\r\n\r\n  return (\r\n    <Grid container justify=\"center\">\r\n      <Grid xs={12} item className={root}>\r\n        {data.length === 0 || isLoading ? (\r\n          <h1 style={{ textAlign: \"center\" }}>Loading...</h1>\r\n        ) : (\r\n          <>\r\n            <SearchFilterContainer />\r\n            <Section backColor={iceBlue}>\r\n              <Grid className={heading} item xs={12}>\r\n                <Typography variant=\"h2\">\r\n                  <span style={{ color: black }}>{usedCarsTitle[0]}</span>\r\n                  <span style={{ color: red }}> {usedCarsTitle[1]}</span>\r\n                  <span style={{ color: black }}> {usedCarsTitle[2]}</span>\r\n                </Typography>\r\n              </Grid>\r\n              <SlideContainer payload={data} />\r\n              <Grid\r\n                style={{\r\n                  display: \"flex\",\r\n                  justifyContent: \"center\",\r\n                }}\r\n                item\r\n                xs={12}\r\n              >\r\n                <Button variant=\"contained\" className={btn}>\r\n                  <img src={arrowleft} alt=\"\" />\r\n                </Button>\r\n\r\n                <Button variant=\"contained\" className={btn}>\r\n                  <img src={arrowright} alt=\"\" />\r\n                </Button>\r\n              </Grid>\r\n            </Section>\r\n            {/* <ComparisonContext /> */}\r\n          </>\r\n        )}\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default UsedCarsContainer;\r\n","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\Utils\\hooks\\useApi.ts",["624","625","626","627","628","629"],"import { useState } from \"react\";\r\nimport {\r\n  getData,\r\n  getSingleData,\r\n  addToFav,\r\n  deleteData,\r\n  updateUser,\r\n} from \"./actions\";\r\nimport { ICarCard } from \"../../layout/Sections/Utils/types\";\r\nconst useApi = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [data, setData] = useState([]);\r\n  const [obj, setObj] = useState<ICarCard>();\r\n  const [open, setOpen] = useState(false);\r\n  const [responseMessage, setResponseMessage] = useState({\r\n    status: \"\",\r\n    message: \"\",\r\n  });\r\n  const loadAllData = async (url: string,param: number | string) => {\r\n    setIsLoading(true);\r\n    await getData(url,param)\r\n      .then((response) => {\r\n        setIsLoading(false);\r\n        if (response.status === \"success\") {\r\n          setData(response.data.result);\r\n        } else {\r\n          return \"error\";\r\n        }\r\n      })\r\n      .catch((error: any) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  const loadSingleData = async (url: string, id: string) => {\r\n    setIsLoading(true);\r\n    await getSingleData(url, id)\r\n      .then((response) => {\r\n        setIsLoading(false);\r\n        if (response.status === \"success\") {\r\n          setData(response.data.result);\r\n          setObj(response.data.result);\r\n        } else {\r\n          return \"error\";\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  const addFavs = async (url: string, id: string) => {\r\n    setIsLoading(true);\r\n    setOpen(false);\r\n    await addToFav(url, id)\r\n      .then((response) => {\r\n        setIsLoading(false);\r\n        if (response.status === \"fail\") {\r\n          setOpen(true);\r\n          setResponseMessage({\r\n            status: \"error\",\r\n            message: response.message,\r\n          });\r\n        } else {\r\n          setOpen(true);\r\n          setResponseMessage({\r\n            status: \"success\",\r\n            message: response.message,\r\n          });\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        setOpen(true);\r\n        setResponseMessage({\r\n          status: \"error\",\r\n          message: error.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  const updateProfile = async (\r\n    url: string,\r\n    data: any,\r\n    number: string,\r\n    date: any,\r\n    Image: any\r\n  ) => {\r\n    setIsLoading(true);\r\n    var formData = new FormData();\r\n    {\r\n      Image && formData.append(\"image\", Image);\r\n    }\r\n    {\r\n      data.fullName && formData.append(\"firstName\", data.fullName);\r\n    }\r\n    {\r\n      data.gender && formData.append(\"gender\", data.gender);\r\n    }\r\n    {\r\n      data.city && formData.append(\"city\", data.city);\r\n    }\r\n    {\r\n      data.userName && formData.append(\"displayName\", data.userName);\r\n    }\r\n    {\r\n      date && formData.append(\"dateOfBirth\", date);\r\n    }\r\n\r\n    await updateUser(url, formData)\r\n      .then((response) => {\r\n        if (response.status === \"success\") {\r\n          setIsLoading(false);\r\n          console.log(response);\r\n          setOpen(true);\r\n          setResponseMessage({\r\n            status: \"success\",\r\n            message: response.message,\r\n          });\r\n        } else {\r\n          setOpen(true);\r\n          console.log(response);\r\n          setResponseMessage({\r\n            status: \"error\",\r\n            message: response.message,\r\n          });\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        setOpen(true);\r\n        setResponseMessage({\r\n          status: \"error\",\r\n          message: error.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  const changePassword = async (url: string, data: any) => {\r\n    setIsLoading(true);\r\n    var formData = new FormData();\r\n    formData.append(\"passwordCurrent\", data.currentPassword);\r\n    formData.append(\"password\", data.newPassword);\r\n    formData.append(\"passwordConfirm\", data.confirmPassword);\r\n\r\n    await updateUser(url, formData)\r\n      .then((response) => {\r\n        if (response.status === \"success\") {\r\n          setIsLoading(false);\r\n          console.log(response);\r\n          setOpen(true);\r\n          setResponseMessage({\r\n            status: \"success\",\r\n            message: response.message,\r\n          });\r\n        } else {\r\n          setOpen(true);\r\n          console.log(response);\r\n          setResponseMessage({\r\n            status: \"error\",\r\n            message: response.message,\r\n          });\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        setOpen(true);\r\n        setResponseMessage({\r\n          status: \"error\",\r\n          message: error.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  const removeData = async (url: string, id: string) => {\r\n    setIsLoading(true);\r\n    setOpen(false);\r\n    await deleteData(url, id)\r\n      .then((response) => {\r\n        if (response.status === \"success\") {\r\n          let filteredArray = data.filter((item: any) => item._id !== id);\r\n          setIsLoading(false);\r\n          setData(filteredArray);\r\n          setOpen(true);\r\n          setResponseMessage({\r\n            status: \"success\",\r\n            message: response.message,\r\n          });\r\n        } else {\r\n          setOpen(true);\r\n          setResponseMessage({\r\n            status: \"error\",\r\n            message: response.message,\r\n          });\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        setOpen(true);\r\n        setResponseMessage({\r\n          status: \"error\",\r\n          message: error.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  return {\r\n    loadSingleData,\r\n    addFavs,\r\n    loadAllData,\r\n    removeData,\r\n    updateProfile,\r\n    changePassword,\r\n    data,\r\n    setData,\r\n    isLoading,\r\n    setResponseMessage,\r\n    responseMessage,\r\n    open,\r\n    setOpen,\r\n    obj\r\n  };\r\n};\r\n\r\nexport default useApi;\r\n","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\Utils\\hooks\\actions.ts",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\components\\InputField\\index.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\CarDetail\\useStyles.ts",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Utils\\carDetail.ts",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\CarDetail\\Slider.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\CarDetail\\CarInformation.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\components\\index.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\Utils\\hooks\\endpoints.ts",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\Utils\\regex.ts",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\CarDetail\\CarDetail.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\Banner\\Banner.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\sections\\Footer\\index.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\components\\BreadCrumbs\\index.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\sections\\VerticalCarFilters\\index.tsx",["630"],"import {\r\n  Grid,\r\n  Slider,\r\n  FormGroup,\r\n  FormControlLabel,\r\n  Checkbox,\r\n  Typography,\r\n  IconButton,\r\n} from \"@material-ui/core\";\r\nimport FilterAccordion from \"../../components/Accordion\";\r\nimport {\r\n  Carfilters,\r\n  CarFiltersData,\r\n} from \"../../Utils/constants/language/en/filtersData\";\r\nimport { City, State } from \"country-state-city\";\r\nimport HighlightOffRoundedIcon from \"@material-ui/icons/HighlightOffRounded\";\r\nimport InputFieldWithButton from \"../../components/InputField/InputFieldWithButton\";\r\nimport InputField from \"../../components/InputField\";\r\nimport { fieldNames } from \"../../Utils/constants/formsConstants\";\r\nimport { useForm } from \"../../pages/carsListing/useForm\";\r\nimport VerticalFilterStyles from \"./styles\";\r\nimport DialogBox from \"../../components/DialogBox\";\r\nimport { useState } from \"react\";\r\nimport { ICity } from \"country-state-city/dist/lib/interface\";\r\nimport { APPLIED_FILTERS } from \"../../Utils/constants/language/en/buttonLabels\";\r\n\r\nexport interface CarFiltersProps {}\r\n\r\nconst CarFilters: React.FC<CarFiltersProps> = () => {\r\n  const [searchResult, setSearchResult] = useState<ICity[]>();\r\n  const {} = VerticalFilterStyles();\r\n  const {\r\n    KEYWORDS,\r\n    PRICE_RANGE,\r\n    YEAR,\r\n    MAKE,\r\n    PROVINCE,\r\n    CITY,\r\n    REGISTRATION_CITY,\r\n    MILEAGE,\r\n    TRANSMISSION,\r\n    ENGINE_TYPE,\r\n    ENGINE_CAPACITY,\r\n    COLOR,\r\n    BODY_TYPE,\r\n    PICTURE_AVAILABILITY,\r\n    VIDEO_AVAILABILITY,\r\n    SELLER_TYPE,\r\n    AD_TYPE\r\n  } = CarFiltersData;\r\n\r\n  const majorCities = [\"Karachi\", \"Islamabad\", \"Lahore\", \"Peshawar\", \"Quetta\"];\r\n  const mainCarTypes = [\"Sedan\", \"Hatchback\", \"Pick Up\"];\r\n  const mainColors = [\"Black\", \"White\", \"Red\"];\r\n  const cities = City.getCitiesOfCountry(\"PK\");\r\n  const provinces = State.getStatesOfCountry(\"PK\");\r\n  const extractedCityNames = cities?.map((item) => item.name);\r\n  let cityNames = [];\r\n  if (extractedCityNames) {\r\n    cityNames.push(...extractedCityNames);\r\n  }\r\n  const {\r\n    values,\r\n    setValues,\r\n    errors,\r\n    handleInputChange,\r\n    handleCheckboxChange,\r\n    handleSingleCheckBoxChange,\r\n    appliedFilters,\r\n    removeFilter,\r\n    handleSubmit,\r\n  } = useForm(true);\r\n\r\n  const handleSearchInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    let result = City.getCitiesOfCountry(\"PK\")?.filter(\r\n      (city: ICity) =>\r\n        city.name.substr(0, e.target.value.length).toLowerCase() ===\r\n        e.target.value.toLowerCase()\r\n    );\r\n    if (e.target.value === \"\") {\r\n      result = [];\r\n    }\r\n    setSearchResult(result);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {appliedFilters.length > 0 && (\r\n        <FilterAccordion title={APPLIED_FILTERS}>\r\n          <Grid container spacing={1}>\r\n            {appliedFilters.map((filter: any) => (\r\n              <Grid\r\n                key={`filter-${filter}`}\r\n                item\r\n                container\r\n                justifyContent=\"space-between\"\r\n                xs={12}\r\n              >\r\n                <Typography variant=\"body2\">{filter}</Typography>\r\n                <IconButton size=\"small\" onClick={() => removeFilter(filter)}>\r\n                  <HighlightOffRoundedIcon color=\"secondary\" fontSize=\"small\" />\r\n                </IconButton>\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n        </FilterAccordion>\r\n      )}\r\n      <FilterAccordion title={KEYWORDS}>\r\n        <InputFieldWithButton\r\n          name={fieldNames.keywords}\r\n          label=\"Keywords\"\r\n          placeholder=\"Eg. Honda In Lahore\"\r\n          value={values.keywords}\r\n          error={errors.keywords}\r\n          onChange={handleInputChange}\r\n          handleClick={handleSubmit}\r\n        />\r\n      </FilterAccordion>\r\n      <FilterAccordion title={PRICE_RANGE}>\r\n        <Grid container direction=\"column\">\r\n          <Grid item container spacing={1}>\r\n            <Grid item xs={5}>\r\n              <InputField\r\n                name={fieldNames.priceFrom}\r\n                label=\"From\"\r\n                value={values.priceRange[0]}\r\n                error={errors.priceFrom}\r\n                onChange={(e: any) => {\r\n                  setValues((previousState: any) => {\r\n                    previousState.priceRange[0] = e.target.value;\r\n                    return { ...previousState };\r\n                  });\r\n                }}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={7}>\r\n              <InputFieldWithButton\r\n                name={fieldNames.priceTo}\r\n                label=\"To\"\r\n                value={values.priceRange[1]}\r\n                error={errors.priceTo}\r\n                onChange={(e: any) => {\r\n                  setValues((previousState: any) => {\r\n                    previousState.priceRange[1] = e.target.value;\r\n                    return { ...previousState };\r\n                  });\r\n                }}\r\n                handleClick={handleSubmit}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item>\r\n            <Slider\r\n              value={[values.priceRange[0], values.priceRange[1]]}\r\n              min={50000}\r\n              max={5000000}\r\n              onChange={(event: any, newValue: number | number[]) => {\r\n                setValues((previousState: any) => {\r\n                  console.log(newValue);\r\n                  previousState.priceRange = newValue as number[];\r\n                  return { ...previousState };\r\n                });\r\n              }}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </FilterAccordion>\r\n      <FilterAccordion title={YEAR}>\r\n        <Grid item container spacing={1}>\r\n          <Grid item xs={5}>\r\n            <InputField\r\n              name={fieldNames.yearFrom}\r\n              label=\"From\"\r\n              value={values.yearRange[0]}\r\n              error={errors.yearFrom}\r\n              onChange={(e: any) => {\r\n                setValues((previousState: any) => {\r\n                  previousState.priceRange[0] = e.target.value;\r\n                  return { ...previousState };\r\n                });\r\n              }}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={7}>\r\n            <InputFieldWithButton\r\n              name={fieldNames.yearTo}\r\n              label=\"To\"\r\n              value={values.yearRange[1]}\r\n              error={errors.yearTo}\r\n              onChange={(e: any) => {\r\n                setValues((previousState: any) => {\r\n                  previousState.priceRange[1] = e.target.value;\r\n                  return { ...previousState };\r\n                });\r\n              }}\r\n              handleClick={handleSubmit}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </FilterAccordion>\r\n      <FilterAccordion title={MAKE}>\r\n        <InputField label=\"Eg. Honda In Lahore\" />\r\n      </FilterAccordion>\r\n      <FilterAccordion title={PROVINCE}>\r\n        <FormGroup>\r\n          {provinces.map((province) => (\r\n            <FormControlLabel\r\n              key={`province-${province.name}`}\r\n              control={\r\n                <Checkbox\r\n                  checked={values.province.indexOf(province.name) > -1}\r\n                  onChange={(e) => handleCheckboxChange(e, \"province\")}\r\n                  name={province.name}\r\n                  color=\"secondary\"\r\n                  size=\"small\"\r\n                />\r\n              }\r\n              label={province.name}\r\n            />\r\n          ))}\r\n        </FormGroup>\r\n      </FilterAccordion>\r\n      <FilterAccordion title={CITY}>\r\n        <FormGroup>\r\n          {cityNames\r\n            .filter((item) => majorCities.includes(item))\r\n            .map((city) => (\r\n              <FormControlLabel\r\n                key={`city-${city}`}\r\n                control={\r\n                  <Checkbox\r\n                    checked={values.city.indexOf(city) > -1}\r\n                    onChange={(e) => handleCheckboxChange(e, \"city\")}\r\n                    name={city}\r\n                    color=\"secondary\"\r\n                  />\r\n                }\r\n                label={city}\r\n              />\r\n            ))}\r\n          <DialogBox title=\"Select Cities\">\r\n            <Grid style={{ display: \"flex\" }} container>\r\n              <Grid xs={12}>\r\n                <InputField\r\n                  variant=\"filled\"\r\n                  label=\"Search\"\r\n                  onChange={handleSearchInputChange}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <Typography variant=\"h4\" gutterBottom>\r\n                  {\"Search Result\"}\r\n                </Typography>\r\n                {searchResult &&\r\n                  searchResult.map((city: ICity) => {\r\n                    return (\r\n                      <FormControlLabel\r\n                        key={`city-${city.name}`}\r\n                        control={\r\n                          <Checkbox\r\n                            checked={values.city.indexOf(city.name) > -1}\r\n                            onChange={(e) => handleCheckboxChange(e, \"city\")}\r\n                            name={city.name}\r\n                            color=\"secondary\"\r\n                            size=\"small\"\r\n                          />\r\n                        }\r\n                        label={city.name}\r\n                      />\r\n                    );\r\n                  })}\r\n              </Grid>\r\n              {provinces.map((province) => (\r\n                <Grid item xs={12}>\r\n                  <Typography variant=\"h4\" gutterBottom>\r\n                    {province.name}\r\n                  </Typography>\r\n                  {City.getCitiesOfState(\r\n                    province.countryCode,\r\n                    province.isoCode\r\n                  ).map((city) => {\r\n                    return (\r\n                      <FormControlLabel\r\n                        key={`city-${city.name}`}\r\n                        control={\r\n                          <Checkbox\r\n                            checked={values.city.indexOf(city.name) > -1}\r\n                            onChange={(e) => handleCheckboxChange(e, \"city\")}\r\n                            name={city.name}\r\n                            color=\"secondary\"\r\n                            size=\"small\"\r\n                          />\r\n                        }\r\n                        label={city.name}\r\n                      />\r\n                    );\r\n                  })}\r\n                </Grid>\r\n              ))}\r\n            </Grid>\r\n          </DialogBox>\r\n        </FormGroup>\r\n      </FilterAccordion>\r\n      <FilterAccordion title={REGISTRATION_CITY}>\r\n        <FormGroup>\r\n          {cityNames\r\n            .filter((item) => majorCities.includes(item))\r\n            .map((city) => (\r\n              <FormControlLabel\r\n                key={`city-${city}`}\r\n                control={\r\n                  <Checkbox\r\n                    checked={values.registrationCity.indexOf(city) > -1}\r\n                    onChange={(e) =>\r\n                      handleCheckboxChange(e, \"registrationCity\")\r\n                    }\r\n                    name={city}\r\n                    color=\"secondary\"\r\n                  />\r\n                }\r\n                label={city}\r\n              />\r\n            ))}\r\n\r\n          <DialogBox title=\"Select Cities\">\r\n            <Grid style={{ display: \"flex\" }} container>\r\n              {provinces.map((province) => (\r\n                <Grid item xs={12} md={6}>\r\n                  <Typography variant=\"h4\" gutterBottom>\r\n                    {province.name}\r\n                  </Typography>\r\n                  {City.getCitiesOfState(\r\n                    province.countryCode,\r\n                    province.isoCode\r\n                  ).map((city) => {\r\n                    return (\r\n                      <FormControlLabel\r\n                        key={`city-${city.name}`}\r\n                        control={\r\n                          <Checkbox\r\n                            checked={values.city.indexOf(city.name) > -1}\r\n                            onChange={(e) => handleCheckboxChange(e, \"city\")}\r\n                            name={city.name}\r\n                            color=\"secondary\"\r\n                            size=\"small\"\r\n                          />\r\n                        }\r\n                        label={city.name}\r\n                      />\r\n                    );\r\n                  })}\r\n                </Grid>\r\n              ))}\r\n            </Grid>\r\n          </DialogBox>\r\n        </FormGroup>\r\n      </FilterAccordion>\r\n      <FilterAccordion title={MILEAGE}>\r\n        <Grid item container spacing={1}>\r\n          <Grid item xs={5}>\r\n            <InputField\r\n              name={fieldNames.mileageFrom}\r\n              label=\"From\"\r\n              value={values.mileageRange[0]}\r\n              error={errors.mileageFrom}\r\n              onChange={(e: any) => {\r\n                setValues((previousState: any) => {\r\n                  previousState.mileageRange[0] = e.target.value;\r\n                  return { ...previousState };\r\n                });\r\n              }}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={7}>\r\n            <InputFieldWithButton\r\n              name={fieldNames.mileageTo}\r\n              label=\"To\"\r\n              value={values.mileageRange[1]}\r\n              error={errors.mileageTo}\r\n              onChange={(e: any) => {\r\n                setValues((previousState: any) => {\r\n                  previousState.mileageRange[1] = e.target.value;\r\n                  return { ...previousState };\r\n                });\r\n              }}\r\n              handleClick={handleSubmit}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </FilterAccordion>\r\n      <FilterAccordion title={TRANSMISSION}>\r\n        <FormGroup>\r\n          {Carfilters.TRANSMISSION.map((type) => (\r\n            <FormControlLabel\r\n              key={`transmission-type-${type}`}\r\n              control={\r\n                <Checkbox\r\n                  checked={values.transmission.indexOf(type) > -1}\r\n                  onChange={(e) => handleCheckboxChange(e, \"transmission\")}\r\n                  name={type}\r\n                  color=\"secondary\"\r\n                  size=\"small\"\r\n                />\r\n              }\r\n              label={type}\r\n            />\r\n          ))}\r\n        </FormGroup>\r\n      </FilterAccordion>\r\n      <FilterAccordion title={ENGINE_TYPE}>\r\n        <FormGroup>\r\n          {Carfilters.ENGINE_TYPE.map((type) => (\r\n            <FormControlLabel\r\n              key={`engine-type-${type}`}\r\n              control={\r\n                <Checkbox\r\n                  checked={values.engineType.indexOf(type) > -1}\r\n                  onChange={(e) => handleCheckboxChange(e, \"engineType\")}\r\n                  name={type}\r\n                  color=\"secondary\"\r\n                  size=\"small\"\r\n                />\r\n              }\r\n              label={type}\r\n            />\r\n          ))}\r\n        </FormGroup>\r\n      </FilterAccordion>\r\n      <FilterAccordion title={ENGINE_CAPACITY}>\r\n        <Grid item container spacing={1}>\r\n          <Grid item xs={5}>\r\n            <InputField\r\n              name={fieldNames.engineCapacityFrom}\r\n              label=\"From\"\r\n              value={values.engineCapacityRange[0]}\r\n              error={errors.engineCapacityFrom}\r\n              onChange={(e: any) => {\r\n                setValues((previousState: any) => {\r\n                  previousState.mileageRange[0] = e.target.value;\r\n                  return { ...previousState };\r\n                });\r\n              }}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={7}>\r\n            <InputFieldWithButton\r\n              name={fieldNames.engineCapacityTo}\r\n              label=\"To\"\r\n              value={values.engineCapacityRange[1]}\r\n              error={errors.engineCapacityTo}\r\n              onChange={(e: any) => {\r\n                setValues((previousState: any) => {\r\n                  previousState.mileageRange[1] = e.target.value;\r\n                  return { ...previousState };\r\n                });\r\n              }}\r\n              handleClick={handleSubmit}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </FilterAccordion>\r\n      <FilterAccordion title={COLOR}>\r\n        <FormGroup>\r\n          {Carfilters.COLOR.filter((item) =>\r\n            mainColors.includes(item.name)\r\n          ).map((type) => (\r\n            <FormControlLabel\r\n              key={`color-type-${type.name}`}\r\n              control={\r\n                <Checkbox\r\n                  checked={values.color.indexOf(type.name) > -1}\r\n                  onChange={(e) => handleCheckboxChange(e, \"color\")}\r\n                  name={type.name}\r\n                  color=\"secondary\"\r\n                  size=\"small\"\r\n                />\r\n              }\r\n              label={\r\n                <div style={{ display: \"flex\" }}>\r\n                  <span\r\n                    style={{\r\n                      borderRadius: \"50%\",\r\n                      maxWidth: \"20px\",\r\n                      maxHeight: \"20px\",\r\n                      minWidth: \"20px\",\r\n                      minHeight: \"20px\",\r\n                      backgroundColor: type.hex,\r\n                      border: \"0.2px solid grey\",\r\n                      marginRight: \"7px\",\r\n                    }}\r\n                  />\r\n                  <Typography>{type.name}</Typography>\r\n                </div>\r\n              }\r\n            />\r\n          ))}\r\n          <FormControlLabel\r\n            key={`color-type-other`}\r\n            control={\r\n              <Checkbox\r\n                checked={values.color.indexOf(\"Other\") > -1}\r\n                onChange={(e) => handleCheckboxChange(e, \"color\")}\r\n                name=\"Other\"\r\n                color=\"secondary\"\r\n                size=\"small\"\r\n              />\r\n            }\r\n            label={\r\n              <div style={{ display: \"flex\" }}>\r\n                <Typography>Other Colors</Typography>\r\n              </div>\r\n            }\r\n          />\r\n\r\n          <DialogBox title=\"Select Color\">\r\n            <Grid container spacing={2}>\r\n              {Carfilters.COLOR.map((type) => (\r\n                <Grid item xs={12} md={6}>\r\n                  <FormControlLabel\r\n                    key={`color-type-${type.name}`}\r\n                    control={\r\n                      <Checkbox\r\n                        checked={values.color.indexOf(type.name) > -1}\r\n                        onChange={(e) => handleCheckboxChange(e, \"color\")}\r\n                        name={type.name}\r\n                        color=\"secondary\"\r\n                        size=\"small\"\r\n                      />\r\n                    }\r\n                    label={\r\n                      <div style={{ display: \"flex\" }}>\r\n                        <span\r\n                          style={{\r\n                            borderRadius: \"50%\",\r\n                            maxWidth: \"20px\",\r\n                            maxHeight: \"20px\",\r\n                            minWidth: \"20px\",\r\n                            minHeight: \"20px\",\r\n                            backgroundColor: type.hex,\r\n                            border: \"0.2px solid grey\",\r\n                            marginRight: \"7px\",\r\n                          }}\r\n                        />\r\n                        <Typography>{type.name}</Typography>\r\n                      </div>\r\n                    }\r\n                  />\r\n                </Grid>\r\n              ))}\r\n              <Grid item xs={12}>\r\n                <FormControlLabel\r\n                  key={`color-type-other`}\r\n                  control={\r\n                    <Checkbox\r\n                      checked={values.color.indexOf(\"Other\") > -1}\r\n                      onChange={(e) => handleCheckboxChange(e, \"color\")}\r\n                      name=\"Other\"\r\n                      color=\"secondary\"\r\n                      size=\"small\"\r\n                    />\r\n                  }\r\n                  label={\r\n                    <div style={{ display: \"flex\" }}>\r\n                      <Typography>Other Colors</Typography>\r\n                    </div>\r\n                  }\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </DialogBox>\r\n        </FormGroup>\r\n      </FilterAccordion>\r\n      <FilterAccordion title={BODY_TYPE}>\r\n        <FormGroup>\r\n          {Carfilters.BODY_TYPE.filter((item) =>\r\n            mainCarTypes.includes(item.name)\r\n          ).map((type) => (\r\n            <FormControlLabel\r\n              key={`body-type-${type.name}`}\r\n              control={\r\n                <Checkbox\r\n                  checked={values.bodyType.indexOf(type.name) > -1}\r\n                  onChange={(e) => handleCheckboxChange(e, \"bodyType\")}\r\n                  name={type.name}\r\n                  color=\"secondary\"\r\n                  size=\"small\"\r\n                />\r\n              }\r\n              label={\r\n                <div style={{ display: \"flex\" }}>\r\n                  <img\r\n                    width=\"60px\"\r\n                    style={{ margin: \"0 10px\" }}\r\n                    src={type.icon}\r\n                    alt={type.name}\r\n                  />\r\n                  <Typography>{type.name}</Typography>\r\n                </div>\r\n              }\r\n            />\r\n          ))}\r\n\r\n          <DialogBox title=\"Select Body Type\">\r\n            <Grid container spacing={2}>\r\n              {Carfilters.BODY_TYPE.map((type) => (\r\n                <Grid item xs={12} md={6}>\r\n                  <FormControlLabel\r\n                    key={`body-type-${type.name}`}\r\n                    control={\r\n                      <Checkbox\r\n                        checked={values.bodyType.indexOf(type.name) > -1}\r\n                        onChange={(e) => handleCheckboxChange(e, \"bodyType\")}\r\n                        name={type.name}\r\n                        color=\"secondary\"\r\n                        size=\"small\"\r\n                      />\r\n                    }\r\n                    label={\r\n                      <div style={{ display: \"flex\" }}>\r\n                        <img\r\n                          width=\"60px\"\r\n                          style={{ margin: \"0 10px\" }}\r\n                          src={type.icon}\r\n                          alt={type.name}\r\n                        />\r\n                        <Typography>{type.name}</Typography>\r\n                      </div>\r\n                    }\r\n                  />\r\n                </Grid>\r\n              ))}\r\n            </Grid>\r\n          </DialogBox>\r\n        </FormGroup>\r\n      </FilterAccordion>\r\n      <FilterAccordion title={PICTURE_AVAILABILITY}>\r\n        <FormGroup>\r\n          <FormControlLabel\r\n            control={\r\n              <Checkbox\r\n                checked={values.withPicture}\r\n                onChange={handleSingleCheckBoxChange}\r\n                name={fieldNames.pictureAvailability}\r\n                color=\"secondary\"\r\n                size=\"small\"\r\n              />\r\n            }\r\n            label={Carfilters.PICTURE_AVAILABILITY[0]}\r\n          />\r\n        </FormGroup>\r\n      </FilterAccordion>\r\n      <FilterAccordion title={VIDEO_AVAILABILITY}>\r\n        <FormGroup>\r\n          <FormControlLabel\r\n            control={\r\n              <Checkbox\r\n                checked={values.withVideo}\r\n                onChange={handleSingleCheckBoxChange}\r\n                name={fieldNames.videoAvailability}\r\n                color=\"secondary\"\r\n                size=\"small\"\r\n              />\r\n            }\r\n            label={Carfilters.VIDEO_AVAILABILITY[0]}\r\n          />\r\n        </FormGroup>\r\n      </FilterAccordion>\r\n      <FilterAccordion title={SELLER_TYPE}>\r\n        <FormGroup>\r\n          {Carfilters.SELLER_TYPE.map((type) => (\r\n            <FormControlLabel\r\n              key={`seller-type-${type}`}\r\n              control={\r\n                <Checkbox\r\n                  checked={values.sellerType.indexOf(type) > -1}\r\n                  onChange={(e) => handleCheckboxChange(e, \"sellerType\")}\r\n                  name={type}\r\n                  color=\"secondary\"\r\n                  size=\"small\"\r\n                />\r\n              }\r\n              label={type}\r\n            />\r\n          ))}\r\n        </FormGroup>\r\n      </FilterAccordion>\r\n      <FilterAccordion title={AD_TYPE}>\r\n        <FormGroup>\r\n          {Carfilters.AD_TYPE.map((type) => (\r\n            <FormControlLabel\r\n              key={`ad-type-${type}`}\r\n              control={\r\n                <Checkbox\r\n                  checked={values.adType.indexOf(type) > -1}\r\n                  onChange={(e) => handleCheckboxChange(e, \"adType\")}\r\n                  name={type}\r\n                  color=\"secondary\"\r\n                  size=\"small\"\r\n                />\r\n              }\r\n              label={type}\r\n            />\r\n          ))}\r\n        </FormGroup>\r\n      </FilterAccordion>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CarFilters;\r\n","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\sections\\HorizontalFilters\\index.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\pages\\AddEditCar\\UploadPhotosForm.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\pages\\AddEditCar\\CarInformationForm.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\pages\\AddEditCar\\CarAdditionalInformation.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\components\\CustomTitle\\style.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\components\\InputField\\styles.ts",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\PinVerfication\\index.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\components\\CustomTitle\\Size.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Utils\\color.constants.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\Header\\paths.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\components\\ListingCard\\index.tsx",["631"],"import { Card, CardContent, CardMedia, Typography } from \"@material-ui/core\";\r\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\r\nimport ListingCardStyles from \"./styles\";\r\nimport LocationIcon from \"../../assets/icons/location.png\";\r\nimport { Colors } from \"../../Utils/constants/colors/colors\";\r\nimport CarImage from \"../../assets/Cars/listingCard.jpg\";\r\nimport { ICarCard } from \"../../Utils/interfaces/products.interface\";\r\nimport ConvertDate from \"../../components/convertDate\";\r\n\r\nexport interface ListingCardProps {\r\n  data: ICarCard[];\r\n  layoutType: string;\r\n  span?: string;\r\n  isFavs?: boolean;\r\n  handleFavs?: (id: string) => void;\r\n}\r\n\r\nconst ListingCard: React.FC<ListingCardProps> = ({\r\n  data,\r\n  layoutType,\r\n  isFavs,\r\n  span,\r\n  handleFavs,\r\n}) => {\r\n  const {\r\n    root,\r\n    grid,\r\n    featuredBadge,\r\n    yearPrice,\r\n    detailRoot,\r\n    details,\r\n    location,\r\n    favsIcon,\r\n    label,\r\n    favsIconGrid\r\n  } = ListingCardStyles();\r\n  const { red,grey} = Colors;\r\n\r\n  const favs = (id: string) => {\r\n    if (handleFavs) {\r\n      handleFavs(id);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {data &&\r\n        data.map((payload: ICarCard, index: number) => {\r\n          return (\r\n            <Card\r\n              key={`car ${index}`}\r\n              className={layoutType === \"list\" ? root : grid}\r\n            >\r\n              <CardMedia\r\n                style={{\r\n                  display: \"flex\",\r\n                  justifyContent: \"center\",\r\n                  alignItems: \"center\",\r\n                  overflow: \"hidden\",\r\n                  maxHeight: \"200px\",\r\n                }}\r\n              >\r\n                <img\r\n                  style={{\r\n                    minWidth: \"100%\",\r\n                    minHeight: \"100%\",\r\n                    width: \"auto\",\r\n                    height: \"auto\",\r\n                  }}\r\n                  src={CarImage}\r\n                  alt=\"\"\r\n                />\r\n              </CardMedia>\r\n              <CardContent className={detailRoot}>\r\n                <div>\r\n                  {/* {isFeatured ? (\r\n            <span className={featuredBadge}>\r\n              <Typography variant=\"body2\">{FEATURED}</Typography>\r\n            </span>\r\n          ) : null} */}\r\n                  {payload.inFavs || isFavs ? (\r\n                    <button\r\n                      onClick={() => {\r\n                        favs(payload._id)\r\n                       \r\n                      }}\r\n                      className={layoutType === \"list\" ? favsIcon : favsIconGrid}\r\n                      style={payload.inFavs || isFavs ? {color: red} : {color: grey}}\r\n                    >\r\n                      <FavoriteIcon />\r\n                    </button>\r\n                  ) :  null}\r\n                </div>\r\n                <div className={yearPrice}>\r\n                  <Typography variant=\"h5\">\r\n                    {ConvertDate(payload.date)}\r\n                  </Typography>\r\n                  <Typography variant=\"h4\">\r\n                    {`PKR ${parseInt(payload.price?.toLocaleString())}`}\r\n                  </Typography>\r\n                </div>\r\n                <div>\r\n                  <Typography variant=\"h3\">{payload.model}</Typography>\r\n                  <div className={details}>\r\n                    <Typography\r\n                      color=\"textSecondary\"\r\n                      variant=\"body2\"\r\n                      component=\"span\"\r\n                    >\r\n                      {payload.year}\r\n                    </Typography>\r\n                    <Typography\r\n                      color=\"textSecondary\"\r\n                      variant=\"body2\"\r\n                      component=\"span\"\r\n                    >\r\n                      {payload.milage?.toLocaleString()}\r\n                    </Typography>\r\n                    <Typography\r\n                      color=\"textSecondary\"\r\n                      variant=\"body2\"\r\n                      component=\"span\"\r\n                    >\r\n                      {payload.engineType}\r\n                    </Typography>\r\n                    <Typography\r\n                      color=\"textSecondary\"\r\n                      variant=\"body2\"\r\n                      component=\"span\"\r\n                    >\r\n                      {`${payload.engineCapacity} cc`}\r\n                    </Typography>\r\n                    <Typography\r\n                      color=\"textSecondary\"\r\n                      variant=\"body2\"\r\n                      component=\"span\"\r\n                    >\r\n                      {payload.transmission}\r\n                    </Typography>\r\n                  </div>\r\n                  <div className={location}>\r\n                    <span>\r\n                      <img src={LocationIcon} alt={payload.city} />\r\n                      <Typography variant=\"subtitle2\">\r\n                        {payload.city}\r\n                      </Typography>\r\n                    </span>\r\n                    <span>\r\n                      <Typography variant=\"subtitle2\">\r\n                        {span ? (\r\n                          <span className={label}>{`${span} ${ConvertDate(\r\n                            payload.date\r\n                          )}`}</span>\r\n                        ) : (\r\n                          ConvertDate(payload.date)\r\n                        )}\r\n                      </Typography>\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          );\r\n        })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ListingCard;\r\n","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\UsedCars\\useStyles.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\UsedCars\\SlideArr.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Utils\\usedCarsContent.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Utils\\carComparision.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\UsedCars\\SearchFilter\\SearchFilterContainer.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\components\\CustomButton.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\components\\Slider\\index.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\components\\Toast.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\Header\\Sidebar\\Sidebar.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\Header\\useStyles.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\components\\ListingBanner\\ListingBannerContext.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\CarDetail\\SellerDetail.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\Banner\\useHooks.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\sections\\VerticalCarFilters\\styles.ts",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\components\\InputField\\InputFieldWithButton.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\PinVerfication\\useStyles.ts",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\components\\ListingCard\\styles.ts",["632"],"import { makeStyles } from \"@material-ui/core\";\r\nimport { Colors } from \"../../Utils/constants/colors/colors\";\r\nconst { flashWhite, carminePink, white, greyFour, blueOne, spanishGrey,black,red} =\r\n  Colors;\r\n\r\nconst ListingCardStyles = makeStyles(() => ({\r\n  root: {\r\n    display: \"flex\",\r\n    backgroundColor: flashWhite,\r\n    boxShadow: \"none\",\r\n    position: \"relative\",\r\n    maxWidth: \"600px\",\r\n    marginTop: \"20px\"\r\n  },\r\n  grid: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    backgroundColor: flashWhite,\r\n    boxShadow: \"none\",\r\n    position: \"relative\",\r\n    marginTop: \"20px\"\r\n  },\r\n  featuredBadge: {\r\n    position: \"absolute\",\r\n    left: \"7px\",\r\n    top: \"7px\",\r\n    padding: \"3px 5px\",\r\n    backgroundColor: carminePink,\r\n    borderRadius: \"2px\",\r\n    \"& > *\": {\r\n      fontSize: \"10px\",\r\n      textTransform: \"uppercase\",\r\n      color: white,\r\n      lineHeight: \"12px\",\r\n    },\r\n  },\r\n  yearPrice: {\r\n    display: \"flex\",\r\n    justifyContent: \"space-between\",\r\n    alignItems: \"center\",\r\n    \"& > h5\": {\r\n      color: greyFour,\r\n    },\r\n    \"& > h4\": {\r\n      color: blueOne,\r\n    },\r\n  },\r\n  detailRoot: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    justifyContent: \"space-between\",\r\n  },\r\n  details: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n    margin: \"10px 0px\",\r\n    \"& > span\": {\r\n      margin: \"5px 15px 5px 0\",\r\n      fontWeight: 500,\r\n    },\r\n  },\r\n  location: {\r\n    display: \"flex\",\r\n    justifyContent: \"space-between\",\r\n    \"& > span\": {\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      \"& > *\": {\r\n        color: spanishGrey,\r\n      },\r\n      \"& > img\": {\r\n        height: \"16px\",\r\n        marginRight: \"7px\",\r\n      },\r\n    },\r\n  },\r\n  favsIcon:{\r\n      position: \"absolute\",\r\n      left: \"140px\",\r\n      top: \"3px\",\r\n      border: \"none\",\r\n      background: \"none\",\r\n      cursor: \"pointer\"\r\n  },\r\n  favsIconGrid:{\r\n    position: \"absolute\",\r\n    left: \"0px\",\r\n    top: \"3px\",\r\n    border: \"none\",\r\n    background: \"none\",\r\n    cursor: \"pointer\"\r\n},\r\n  label: {\r\n    fontWeight: \"bold\",\r\n    color: black\r\n  }\r\n}));\r\n\r\nexport default ListingCardStyles;\r\n","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\pages\\AddEditCar\\SelectComponent.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Utils\\Text.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\components\\Slider\\styles.ts",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\UsedCars\\mobileViewSlider.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\Utils\\Breakpoints.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\components\\convertDate\\index.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\UsedCars\\SearchFilter\\useStyles.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\UsedCars\\SearchFilter\\useHook.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\UsedCars\\SearchFilter\\AdPropertyContext.tsx",["633"],"import {\r\n  Grid,\r\n  Typography,\r\n  InputLabel,\r\n  MenuItem,\r\n  Select,\r\n  InputBase,\r\n} from \"@material-ui/core\";\r\nimport CustomButton from \"../../../../../components/CustomButton\";\r\nimport ArrowDropDownIcon from \"@material-ui/icons/ArrowDropDown\";\r\nimport useStyles from \"./useStyles\";\r\nimport { Colors } from \"../../../Utils/color.constants\";\r\nimport {\r\n  adTitle,\r\n  lessBtn,\r\n  searchBtn,\r\n  adProperty,\r\n} from \"../../../Utils/usedCarsContent\";\r\nimport { Options } from \"../../../Utils/types\";\r\nimport { useHistory,NavLink} from \"react-router-dom\";\r\nconst AdProperyContext = ({\r\n  setIsChecked,\r\n  moreOp,\r\n  setMoreOp,\r\n  data,\r\n}: Options) => {\r\n  const { white, blue } = Colors;\r\n  const { adGrid, optionsBtn, text, btnGrid, select } = useStyles();\r\n  const history = useHistory()\r\n\r\n  const handleChange = (e: any) => {\r\n    const { value, name } = e.target;\r\n    let val = value.trim()\r\n    setMoreOp({\r\n      ...moreOp,\r\n      [name]: val,\r\n    });\r\n  };\r\n\r\n\r\n\r\n  return (\r\n    <Grid container>\r\n    <Grid className={adGrid} item xs={12}>\r\n      <Grid style={{ marginTop: \"30px\" }} item xs={12}>\r\n        <Typography className={text} variant=\"h6\" style={{ color: white }}>\r\n          {adTitle}\r\n        </Typography>\r\n      </Grid>\r\n      <Grid style={{ marginTop: \"30px\" }} item lg={4} xs={12}>\r\n        <InputLabel style={{ color: white, marginBottom: \"10px\" }}>\r\n          {adProperty[0]}\r\n        </InputLabel>\r\n        <Select\r\n          value={moreOp.adWithPics}\r\n          onChange={(e) => {\r\n            handleChange(e);\r\n          }}\r\n          name=\"adWithPics\"\r\n          defaultValue={moreOp.adWithPics}\r\n          input={<InputBase />}\r\n          className={select}\r\n        >\r\n          <MenuItem value={adProperty[0]}>{adProperty[0]}</MenuItem>;\r\n        </Select>\r\n      </Grid>\r\n      <Grid style={{ marginTop: \"30px\" }} item lg={4} xs={12}>\r\n        <InputLabel style={{ color: white, marginBottom: \"10px\" }}>\r\n          {adProperty[1]}\r\n        </InputLabel>\r\n        <Select\r\n          value={moreOp.sellerType}\r\n          onChange={(e) => {\r\n            handleChange(e);\r\n          }}\r\n          name=\"sellerType\"\r\n          defaultValue={moreOp.sellerType}\r\n          input={<InputBase />}\r\n          className={select}\r\n        >\r\n          <MenuItem value={adProperty[1]}>{adProperty[1]}</MenuItem>;\r\n        </Select>\r\n      </Grid>\r\n      <Grid style={{ marginTop: \"30px\" }} item lg={4} xs={12}>\r\n        <InputLabel style={{ color: white, marginBottom: \"10px\" }}>\r\n          {adProperty[2]}\r\n        </InputLabel>\r\n        <Select\r\n          value={moreOp.adTypes}\r\n          onChange={(e) => {\r\n            handleChange(e);\r\n          }}\r\n          name=\"adTypes\"\r\n          defaultValue={moreOp.adTypes}\r\n          input={<InputBase />}\r\n          className={select}\r\n        >\r\n          <MenuItem value={adProperty[2]}>{adProperty[2]}</MenuItem>;\r\n        </Select>\r\n      </Grid>\r\n      <Grid style={{ marginTop: \"80px\" }} item lg={3} sm={6} xs={9}>\r\n        <CustomButton\r\n          handleClick={() => {\r\n            setIsChecked && setIsChecked(false);\r\n          }}\r\n          endIcon={<ArrowDropDownIcon />}\r\n          styles={optionsBtn}\r\n        >\r\n          {lessBtn}\r\n        </CustomButton>\r\n      </Grid>\r\n      <Grid className={btnGrid} item lg={2} xs={10} sm={6}>\r\n        <CustomButton\r\n          variant=\"contained\"\r\n          style={{ background: white, color: blue }}\r\n          // handleClick={() => {\r\n          //   // if (moreOp) {\r\n          //   //   let items = Object.assign(data, moreOp , {});\r\n          //   //   const {adTypes} = items\r\n        \r\n          //   // }\r\n          //   // history.push(`/cars/${moreOp.adTypes}`)\r\n          // }}\r\n        >\r\n          <NavLink to={`/cars/${moreOp.adTypes.replace(/ /g,'-').toLowerCase()}`}>\r\n          {searchBtn}\r\n          </NavLink>\r\n        </CustomButton>\r\n      </Grid>\r\n    </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default AdProperyContext;\r\n","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\UsedCars\\SearchFilter\\OtherDetails.tsx",["634"],"import { Grid, Typography,InputLabel, MenuItem, Select,InputBase } from \"@material-ui/core\";\r\nimport useStyles from \"./useStyles\"\r\nimport { Colors } from \"../../../Utils/color.constants\";\r\nimport { detailTitle ,detailArray,body,color,assembly,transmission} from \"../../../Utils/usedCarsContent\";\r\nimport { Options } from \"../../../Utils/types\";\r\nimport { City } from \"country-state-city\";\r\nconst OtherDetailContext = ({moreOp,setMoreOp} : Options) => {\r\n  const {detailGrid,text,select} = useStyles()\r\n  const city = City.getCitiesOfCountry(\"PK\");\r\n  const {white} = Colors\r\n \r\n  const handleChange = (e: any) => {\r\n    const { value, name } = e.target;\r\n    setMoreOp({\r\n      ...moreOp,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n\r\n  return (\r\n    <Grid container>\r\n    <Grid\r\n      className={detailGrid}\r\n      item\r\n      xs={12}\r\n    >\r\n        <Grid style={{ marginTop: \"30px\" }} item lg={12} xs={10}>\r\n       <Typography variant=\"h6\" className={text} style={{color: white}} >{detailTitle}</Typography>\r\n      </Grid>\r\n      <Grid\r\n        style={{ marginTop: \"50px\" }}\r\n        item\r\n        lg={4} xs={12} sm={12}\r\n      >\r\n        <InputLabel style={{ color: white, marginBottom: \"10px\" }}>\r\n          {detailArray[0]}\r\n        </InputLabel>\r\n        <Select\r\n          value={moreOp.allBody}\r\n          onChange={(e) => {\r\n            handleChange(e);\r\n          }}\r\n          name=\"allBody\"\r\n          defaultValue={moreOp.allBody}\r\n          input={<InputBase />}\r\n          className={select}\r\n        >\r\n           {body.map((data, index) => {\r\n              return (\r\n                <MenuItem key={`body ${index}`} value={data.value}>\r\n                  {data.name}\r\n                </MenuItem>\r\n              );\r\n            })}\r\n        </Select>\r\n      </Grid>\r\n      <Grid\r\n        style={{ marginTop: \"50px\" }}\r\n        item\r\n        lg={4} xs={12} sm={12}\r\n      >\r\n       <InputLabel style={{ color: white, marginBottom: \"10px\" }}>\r\n          {detailArray[1]}\r\n        </InputLabel>\r\n        <Select\r\n          value={moreOp.allColors}\r\n          onChange={(e) => {\r\n            handleChange(e);\r\n          }}\r\n          name=\"allColors\"\r\n          defaultValue={moreOp.allColors}\r\n          input={<InputBase />}\r\n          className={select}\r\n        >\r\n         {color.map((data, index) => {\r\n              return (\r\n                <MenuItem key={`color ${index}`} value={data.value}>\r\n                  {data.name}\r\n                </MenuItem>\r\n              );\r\n            })}\r\n        </Select>\r\n      </Grid>\r\n      <Grid\r\n        style={{ marginTop: \"50px\" }}\r\n        item\r\n        lg={4} xs={12} sm={12}\r\n      >\r\n        <InputLabel style={{ color: white, marginBottom: \"10px\" }}>\r\n          {detailArray[2]}\r\n        </InputLabel>\r\n        <Select\r\n          value={moreOp.registered}\r\n          onChange={(e) => {\r\n            handleChange(e);\r\n          }}\r\n          name=\"registered\"\r\n          defaultValue={moreOp.registered}\r\n          input={<InputBase />}\r\n          className={select}\r\n        >\r\n          <MenuItem value={detailArray[2]}>{detailArray[2]}</MenuItem>;\r\n        </Select>\r\n      </Grid>\r\n      <Grid\r\n        style={{ marginTop: \"50px\" }}\r\n        item\r\n        lg={4} xs={12} sm={12}\r\n      >\r\n         <InputLabel style={{ color: white, marginBottom: \"10px\" }}>\r\n          {detailArray[3]}\r\n        </InputLabel>\r\n        <Select\r\n          value={moreOp.assemblyTypes}\r\n          onChange={(e) => {\r\n            handleChange(e);\r\n          }}\r\n          name=\"assemblyTypes\"\r\n          defaultValue={moreOp.assemblyTypes}\r\n          input={<InputBase />}\r\n          className={select}\r\n        >\r\n          {assembly.map((data, index) => {\r\n              return (\r\n                <MenuItem key={`assembly ${index}`} value={data.value}>\r\n                  {data.name}\r\n                </MenuItem>\r\n              );\r\n            })}\r\n        </Select>\r\n      </Grid>\r\n      <Grid\r\n        style={{ marginTop: \"50px\" }}\r\n        item\r\n        lg={4} xs={12} sm={12}\r\n      >\r\n        <InputLabel style={{ color: white, marginBottom: \"10px\" }}>\r\n          {detailArray[4]}\r\n        </InputLabel>\r\n        <Select\r\n          value={moreOp.transmissionTypes}\r\n          onChange={(e) => {\r\n            handleChange(e);\r\n          }}\r\n          name=\"transmissionTypes\"\r\n          defaultValue={moreOp.transmissionTypes}\r\n          input={<InputBase />}\r\n          className={select}\r\n        >\r\n         {transmission.map((data, index) => {\r\n              return (\r\n                <MenuItem key={`transmission ${index}`} value={data.value}>\r\n                  {data.name}\r\n                </MenuItem>\r\n              );\r\n            })}\r\n        </Select>\r\n      </Grid>\r\n      <Grid\r\n        style={{ marginTop: \"50px\"}}\r\n        item\r\n        lg={4} xs={12} sm={12}\r\n      >\r\n      <InputLabel style={{ color: white, marginBottom: \"10px\" , display: \"none\"}}>\r\n          {detailArray[5]}\r\n        </InputLabel>\r\n        <Select\r\n          className={select}\r\n          style={{display: \"none\"}}\r\n        >\r\n        </Select>\r\n      </Grid>\r\n    </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default OtherDetailContext;\r\n","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\UsedCars\\SearchFilter\\SearchFilterContext.tsx",["635"],"import {\r\n  Grid,\r\n  InputLabel,\r\n  MenuItem,\r\n  Select,\r\n  InputBase,\r\n} from \"@material-ui/core\";\r\nimport { Colors } from \"../../../Utils/color.constants\";\r\nimport ArrowDropDownIcon from \"@material-ui/icons/ArrowDropDown\";\r\nimport CustomButton from \"../../../../../components/CustomButton\";\r\nimport { IToggle } from \"../../../Utils/types\";\r\nimport useStyles from \"./useStyles\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport ErrorOutlineIcon from \"@material-ui/icons/ErrorOutline\";\r\nimport { City} from \"country-state-city\";\r\nimport {\r\n  carmodel,\r\n  Min,\r\n  Max,\r\n  area,\r\n  versions,\r\n  moreBtn,\r\n  array,\r\n  searchBtn,\r\n  engine,\r\n  engineCapacityFrom,\r\n  engineCapacityTo,\r\n  mileageFrom,\r\n  mileageTo,\r\n} from \"../../../Utils/usedCarsContent\";\r\n\r\nconst SearchFilterContext = ({\r\n  setIsChecked,\r\n  isChecked,\r\n  data,\r\n  setData,\r\n}: IToggle) => {\r\n  const { optionsBtn, grid, btnGrid, select, isValid, icon } = useStyles();\r\n  const city = City.getCitiesOfCountry(\"PK\");\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n  } = useForm();\r\n\r\n  const { white, blue } = Colors;\r\n\r\n  const handleChange = (e: any) => {\r\n    const { value, name } = e.target;\r\n    setData({\r\n      ...data,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  const onSubmit = (): void => {\r\n    console.log(\"data\", data);\r\n\r\n  };\r\n\r\n  const OpenDown: React.FunctionComponent = () => {\r\n    return <ErrorOutlineIcon className={icon} />;\r\n  };\r\n\r\n  const getYears = () => {\r\n    const now = new Date().getUTCFullYear();\r\n    const array = Array(now - (now - 62))\r\n      .fill(\"\")\r\n      .map((v, idx) => now - idx) as Array<number>;\r\n    return array.reverse();\r\n  };\r\n\r\n  const getNewYears = () => {\r\n    const now = new Date().getUTCFullYear();\r\n    const array = Array(now - (now - 61))\r\n      .fill(\"\")\r\n      .map((v, idx) => now - idx) as Array<number>;\r\n    return array.reverse();\r\n  };\r\n\r\n  return (\r\n    <Grid container>\r\n      <Grid className={grid} item xs={12}>\r\n        <Grid style={{ marginTop: \"30px\" }} item lg={4} xs={12}>\r\n          <InputLabel style={{ color: white, marginBottom: \"10px\" }}>\r\n            {array[6]}\r\n          </InputLabel>\r\n          <Select\r\n            {...register(\"model\", { required: true })}\r\n            value={data.model}\r\n            onChange={(e) => {\r\n              handleChange(e);\r\n            }}\r\n            name=\"model\"\r\n            defaultValue={data.model}\r\n            input={<InputBase />}\r\n            className={!errors.model ? select : isValid}\r\n            IconComponent={errors.model && OpenDown}\r\n          >\r\n            {carmodel.map((data, index) => {\r\n              return (\r\n                <MenuItem key={`model ${index}`} value={data.value}>\r\n                  {data.name}\r\n                </MenuItem>\r\n              );\r\n            })}\r\n          </Select>\r\n        </Grid>\r\n\r\n        <Grid style={{ marginTop: \"30px\" }} item lg={4} xs={12}>\r\n          <InputLabel style={{ color: white, marginBottom: \"10px\" }}>\r\n            {array[7]}\r\n          </InputLabel>\r\n          <Select\r\n            {...register(\"city\", { required: true })}\r\n            value={data.city}\r\n            onChange={(e) => {\r\n              handleChange(e);\r\n            }}\r\n            name=\"city\"\r\n            defaultValue={data.city}\r\n            input={<InputBase />}\r\n            className={!errors.city ? select : isValid}\r\n            IconComponent={errors.city && OpenDown}\r\n          >\r\n            {city &&\r\n              city.map((data: any, index: number) => {\r\n                return (\r\n                  <MenuItem key={index} value={data.name}>\r\n                    {data.name}\r\n                  </MenuItem>\r\n                );\r\n              })}\r\n          </Select>\r\n        </Grid>\r\n        <Grid style={{ marginTop: \"30px\" }} item lg={2} xs={12}>\r\n          <InputLabel style={{ color: white, marginBottom: \"10px\" }}>\r\n            {array[8]}\r\n          </InputLabel>\r\n          <Select\r\n            value={data.min}\r\n            onChange={(e) => {\r\n              handleChange(e);\r\n            }}\r\n            name=\"min\"\r\n            input={<InputBase />}\r\n            className={select}\r\n          >\r\n            {Min.map((data, index) => {\r\n              return (\r\n                <MenuItem key={`priceRange ${index}`} value={data.value}>\r\n                  {data.name}\r\n                </MenuItem>\r\n              );\r\n            })}\r\n          </Select>\r\n        </Grid>\r\n        <Grid style={{ marginTop: \"30px\" }} item lg={2} xs={12}>\r\n          <InputLabel style={{ color: white, marginBottom: \"10px\" }}>\r\n            {array[12]}\r\n          </InputLabel>\r\n          <Select\r\n            value={data.max}\r\n            onChange={(e) => {\r\n              handleChange(e);\r\n            }}\r\n            name=\"max\"\r\n            input={<InputBase />}\r\n            className={select}\r\n          >\r\n            {Max.map((data, index) => {\r\n              return (\r\n                <MenuItem key={`priceRange ${index}`} value={data.value}>\r\n                  {data.name}\r\n                </MenuItem>\r\n              );\r\n            })}\r\n          </Select>\r\n        </Grid>\r\n        <Grid style={{ marginTop: \"30px\" }} item lg={4} xs={12}>\r\n          <InputLabel style={{ color: white, marginBottom: \"10px\" }}>\r\n            {array[0]}\r\n          </InputLabel>\r\n          <Select\r\n            {...register(\"area\", { required: true })}\r\n            value={data.area}\r\n            onChange={(e) => {\r\n              handleChange(e);\r\n            }}\r\n            name=\"area\"\r\n            defaultValue={data.area}\r\n            input={<InputBase />}\r\n            className={!errors.area ? select : isValid}\r\n            IconComponent={errors.area && OpenDown}\r\n          >\r\n             {city &&\r\n              city.map((data: any, index: number) => {\r\n                return (\r\n                  <MenuItem key={index} value={data.name}>\r\n                    {data.name}\r\n                  </MenuItem>\r\n                );\r\n              })}\r\n          </Select>\r\n        </Grid>\r\n        <Grid style={{ marginTop: \"30px\" }} item lg={4} xs={12}>\r\n          <InputLabel style={{ color: white, marginBottom: \"10px\" }}>\r\n            {array[1]}\r\n          </InputLabel>\r\n          <Select\r\n            value={data.version}\r\n            onChange={(e) => {\r\n              handleChange(e);\r\n            }}\r\n            name=\"version\"\r\n            defaultValue={data.version}\r\n            input={<InputBase />}\r\n            className={select}\r\n          >\r\n            {versions.map((data, index) => {\r\n              return (\r\n                <MenuItem key={`version ${index}`} value={data.value}>\r\n                  {data.name}\r\n                </MenuItem>\r\n              );\r\n            })}\r\n          </Select>\r\n        </Grid>\r\n        <Grid style={{ marginTop: \"30px\" }} item lg={2} xs={12}>\r\n          <InputLabel style={{ color: white, marginBottom: \"10px\" }}>\r\n            {array[2]}\r\n          </InputLabel>\r\n          <Select\r\n            value={data.yearFrom}\r\n            onChange={(e) => {\r\n              handleChange(e);\r\n            }}\r\n            name=\"yearFrom\"\r\n            defaultValue={data.yearFrom}\r\n            input={<InputBase />}\r\n            className={select}\r\n          >\r\n            {getYears().map((data, index) => {\r\n              return (\r\n                <MenuItem key={`year ${index}`} value={data}>\r\n                  {data}\r\n                </MenuItem>\r\n              );\r\n            })}\r\n          </Select>\r\n        </Grid>\r\n        <Grid style={{ marginTop: \"30px\" }} item lg={2} xs={12}>\r\n          <InputLabel style={{ color: white, marginBottom: \"10px\" }}>\r\n            {array[9]}\r\n          </InputLabel>\r\n          <Select\r\n            value={data.yearTo}\r\n            onChange={(e) => {\r\n              handleChange(e);\r\n            }}\r\n            name=\"yearTo\"\r\n            defaultValue={data.yearTo}\r\n            input={<InputBase />}\r\n            className={select}\r\n          >\r\n            {getNewYears().map((data, index) => {\r\n              return (\r\n                <MenuItem key={`year ${index}`} value={data}>\r\n                  {data}\r\n                </MenuItem>\r\n              );\r\n            })}\r\n          </Select>\r\n        </Grid>\r\n        <Grid style={{ marginTop: \"30px\" }} item lg={4} xs={12}>\r\n          <InputLabel style={{ color: white, marginBottom: \"10px\" }}>\r\n            {array[3]}\r\n          </InputLabel>\r\n          <Select\r\n            {...register(\"engine\", { required: true })}\r\n            value={data.engine}\r\n            onChange={(e) => {\r\n              handleChange(e);\r\n            }}\r\n            name=\"engine\"\r\n            defaultValue={data.engine}\r\n            input={<InputBase />}\r\n            className={!errors.engine ? select : isValid}\r\n            IconComponent={errors.engine && OpenDown}\r\n          >\r\n            {engine.map((data, index) => {\r\n              return (\r\n                <MenuItem key={`engine ${index}`} value={data.value}>\r\n                  {data.name}\r\n                </MenuItem>\r\n              );\r\n            })}\r\n          </Select>\r\n        </Grid>\r\n        <Grid style={{ marginTop: \"30px\" }} item lg={2} xs={12}>\r\n          <InputLabel style={{ color: white, marginBottom: \"10px\" }}>\r\n            {array[4]}\r\n          </InputLabel>\r\n          <Select\r\n            value={data.engineCapacityFrom}\r\n            onChange={(e) => {\r\n              handleChange(e);\r\n            }}\r\n            name=\"engineCapacityFrom\"\r\n            defaultValue={data.engineCapacityFrom}\r\n            input={<InputBase />}\r\n            className={select}\r\n          >\r\n            {engineCapacityFrom.map((data, index) => {\r\n              return (\r\n                <MenuItem key={`capacity ${index}`} value={data.value}>\r\n                  {data.name}\r\n                </MenuItem>\r\n              );\r\n            })}\r\n          </Select>\r\n        </Grid>\r\n        <Grid style={{ marginTop: \"30px\" }} item lg={2} xs={12}>\r\n          <InputLabel style={{ color: white, marginBottom: \"10px\" }}>\r\n            {array[11]}\r\n          </InputLabel>\r\n          <Select\r\n            value={data.engineCapacityTo}\r\n            onChange={(e) => {\r\n              handleChange(e);\r\n            }}\r\n            name=\"engineCapacityTo\"\r\n            defaultValue={data.engineCapacityTo}\r\n            input={<InputBase />}\r\n            className={select}\r\n          >\r\n            {engineCapacityTo.map((data, index) => {\r\n              return (\r\n                <MenuItem key={`capacity ${index}`} value={data.value}>\r\n                  {data.name}\r\n                </MenuItem>\r\n              );\r\n            })}\r\n          </Select>\r\n        </Grid>\r\n        <Grid style={{ marginTop: \"30px\" }} item lg={2} xs={12}>\r\n          <InputLabel style={{ color: white, marginBottom: \"10px\" }}>\r\n            {array[5]}\r\n          </InputLabel>\r\n          <Select\r\n            value={data.mileageTo}\r\n            onChange={(e) => {\r\n              handleChange(e);\r\n            }}\r\n            name=\"mileageTo\"\r\n            defaultValue={data.mileageTo}\r\n            input={<InputBase />}\r\n            className={select}\r\n          >\r\n            {mileageTo.map((data, index) => {\r\n              return (\r\n                <MenuItem key={`mileage ${index}`} value={data.value}>\r\n                  {data.name}\r\n                </MenuItem>\r\n              );\r\n            })}\r\n          </Select>\r\n        </Grid>\r\n        <Grid style={{ marginTop: \"30px\" }} item lg={2} xs={12}>\r\n          <InputLabel style={{ color: white, marginBottom: \"10px\" }}>\r\n            {array[10]}\r\n          </InputLabel>\r\n          <Select\r\n            value={data.mileageFrom}\r\n            onChange={(e) => {\r\n              handleChange(e);\r\n            }}\r\n            name=\"mileageFrom\"\r\n            defaultValue={data.mileageFrom}\r\n            input={<InputBase />}\r\n            className={select}\r\n          >\r\n            {mileageFrom.map((data, index) => {\r\n              return (\r\n                <MenuItem key={`mileage ${index}`} value={data.value}>\r\n                  {data.name}\r\n                </MenuItem>\r\n              );\r\n            })}\r\n          </Select>\r\n        </Grid>\r\n        <Grid style={{ marginTop: \"80px\" }} item lg={3} sm={6} xs={9}>\r\n          {!isChecked && setIsChecked && (\r\n            <CustomButton\r\n              handleClick={() => {\r\n                setIsChecked(true);\r\n              }}\r\n              endIcon={<ArrowDropDownIcon />}\r\n              styles={optionsBtn}\r\n            >\r\n              {moreBtn}\r\n            </CustomButton>\r\n          )}\r\n        </Grid>\r\n        <Grid className={btnGrid} item lg={2} xs={10} sm={6}>\r\n          {!isChecked && (\r\n            <CustomButton\r\n              variant=\"contained\"\r\n              style={{ background: white, color: blue }}\r\n              handleClick={handleSubmit(onSubmit)}\r\n            >\r\n              {searchBtn}\r\n            </CustomButton>\r\n          )}\r\n        </Grid>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default SearchFilterContext;\r\n","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\Header\\Sidebar\\sidebarStyles.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\components\\ListingBanner\\useStyles.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\components\\DialogBox\\index.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\components\\Dropdown\\index.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\components\\LayoutToggler\\index.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\components\\Accordion\\index.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\components\\Accordion\\styles.ts",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\components\\Dropdown\\styles.ts",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\components\\DialogBox\\DialogBox.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\sections\\Footer\\styles.ts",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\components\\SearchSelect\\SearchSelect.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\Banner\\bannerStyles.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\components\\SearchSelect\\selectStyles.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\UsedCars\\SlideContainer.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\Profile\\Routes\\Wrapper.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\Profile\\Profile.tsx",["636","637"],"import {\r\n  Grid,\r\n  Typography,\r\n  MenuItem,\r\n  TextField,\r\n  Hidden,\r\n  Divider,\r\n} from \"@material-ui/core\";\r\nimport { useState } from \"react\";\r\nimport AddAPhotoIcon from \"@material-ui/icons/AddAPhoto\";\r\nimport DatePicker from \"./DatePicker\";\r\nimport { useStyles } from \"./useStyles\";\r\nimport useHooks from \"./useHooks\";\r\nimport SideBar from \"./ProfileSidebar/Sidebar\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport CustomButton from \"../../../../components/CustomButton\";\r\nimport ProfileUpload from \"./UploadProfile/ProfileUpload\";\r\nimport RegexInputs from \"./RegexInputs\";\r\nimport {\r\n  paths,\r\n  Title,\r\n  profile,\r\n  profileTitle,\r\n  gender,\r\n  buttonText,\r\n  cancelButtonText,\r\n} from \"../../Utils/sidebarText\";\r\nimport { City } from \"country-state-city\";\r\nimport useApi from \"../../../../Utils/hooks/useApi\";\r\nimport { updateMe } from \"../../../../Utils/hooks/endpoints\";\r\nimport Toast from \"../../../../components/Toast\";\r\nimport ChangePassword from \"./ChangePassword\";\r\n\r\nconst Profile = () => {\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n  } = useForm();\r\n  const { updateProfile, open, setOpen, responseMessage } = useApi();\r\n\r\n  const city = City.getCitiesOfCountry(\"PK\");\r\n  const {\r\n    root,\r\n    select,\r\n    img,\r\n    heading,\r\n    box,\r\n    button,\r\n    btnBox,\r\n    uploadBtn,\r\n    cancelButton,\r\n  } = useStyles();\r\n  const { handleChange, val, date, number, handleChangeDate } = useHooks();\r\n  const [Img, setImg] = useState<string>(\"\");\r\n\r\n  const handleAlertClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const onSubmit = (): void => {\r\n    updateProfile(updateMe, val, number, date, Img);\r\n  };\r\n\r\n  return (\r\n    <Grid container>\r\n      <Grid className={box} item lg={12} md={10} xs={12}>\r\n        <section className={heading}>\r\n          <Hidden mdUp>\r\n            <SideBar Title={Title} sidebar={paths} />\r\n          </Hidden>\r\n          <Typography variant=\"h3\">{profileTitle}</Typography>\r\n        </section>\r\n        <Grid className={img} item xs={12}>\r\n          <section style={{ position: \"relative\" }}>\r\n            <ProfileUpload setImg={setImg} profile={profile} />\r\n            <section className={uploadBtn}>\r\n              <AddAPhotoIcon />\r\n            </section>\r\n          </section>\r\n        </Grid>\r\n        <Grid className={root} item xs={12}>\r\n          <Grid item style={{ display: \"flex\", flexFlow: \"wrap\" }} xs={12}>\r\n            <Grid style={{ margin: \"30px 10px\" }} item lg={5} xs={12}>\r\n              <TextField\r\n                className={select}\r\n                name=\"fullName\"\r\n                value={val.fullName}\r\n                onChange={(e) => handleChange(e)}\r\n                label=\"Full Name\"\r\n                variant=\"outlined\"\r\n              />\r\n            </Grid>\r\n            <Grid style={{ margin: \"30px 10px\" }} item lg={5} xs={12}>\r\n              <TextField\r\n                className={select}\r\n                select\r\n                name=\"gender\"\r\n                value={val.gender}\r\n                onChange={(e) => handleChange(e)}\r\n                label=\"Gender\"\r\n                variant=\"outlined\"\r\n              >\r\n                {gender.map((option) => (\r\n                  <MenuItem key={option.value} value={option.value}>\r\n                    {option.label}\r\n                  </MenuItem>\r\n                ))}\r\n              </TextField>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item style={{ display: \"flex\", flexFlow: \"wrap\" }} xs={12}>\r\n            <Grid style={{ margin: \"30px 10px \" }} item lg={5} xs={12}>\r\n              <DatePicker date={date} handleChangeDate={handleChangeDate} />\r\n            </Grid>\r\n            <Grid style={{ margin: \"30px 10px \" }} item lg={5} xs={12}>\r\n              <TextField\r\n                className={select}\r\n                select\r\n                name=\"city\"\r\n                value={val.city}\r\n                onChange={(e) => handleChange(e)}\r\n                label=\"City\"\r\n                variant=\"outlined\"\r\n              >\r\n                {city &&\r\n                  city.map((data: any, index: number) => {\r\n                    return (\r\n                      <MenuItem key={index} value={data.name}>\r\n                        {data.name}\r\n                      </MenuItem>\r\n                    );\r\n                  })}\r\n              </TextField>\r\n            </Grid>\r\n            <Grid style={{ margin: \"30px 10px\" }} item lg={5} xs={12}>\r\n              <TextField\r\n                // {...register(\"userName\", {\r\n                //   maxLength: 20,\r\n                // })}\r\n                className={select}\r\n                name=\"userName\"\r\n                value={val.userName}\r\n                onChange={(e) => handleChange(e)}\r\n                label=\"UserName\"\r\n                variant=\"outlined\"\r\n              />\r\n              {/* {errors.userName &&\r\n          errors.userName.type === \"maxLength\" &&\r\n          errorMessage(userText)} */}\r\n            </Grid>\r\n            <Grid item lg={5} xs={12} className={btnBox}>\r\n              <Grid item lg={5} xs={12}>\r\n                <CustomButton\r\n                  styles={button}\r\n                  variant=\"contained\"\r\n                  handleClick={handleSubmit(onSubmit)}\r\n                >\r\n                  {buttonText}\r\n                </CustomButton>\r\n              </Grid>\r\n              <Grid item lg={3} xs={12}>\r\n                <CustomButton\r\n                  styles={cancelButton}\r\n                  variant=\"contained\"\r\n                  handleClick={handleSubmit(onSubmit)}\r\n                >\r\n                  {cancelButtonText}\r\n                </CustomButton>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        <Divider />\r\n        <RegexInputs />\r\n        <Divider />\r\n        <ChangePassword/>\r\n      </Grid>\r\n      <Toast\r\n        open={open}\r\n        type={responseMessage.status}\r\n        onClose={handleAlertClose}\r\n        message={responseMessage.message}\r\n      />\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\Profile\\Help\\Help.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\Profile\\ProfileSidebar\\ProfileSideBarContext.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\Profile\\Favorites.tsx",["638"],"import { Grid, Typography, Hidden } from \"@material-ui/core\";\r\nimport { useStyles } from \"./useStyles\";\r\nimport CarListing from \"../../../../components/ListingCard\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { favTitle, paths, Title, fav } from \"../../Utils/sidebarText\";\r\nimport SideBar from \"./ProfileSidebar/Sidebar\";\r\nimport useApi from \"../../../../Utils/hooks/useApi\";\r\nimport { getFavs, removeFavs } from \"../../../../Utils/hooks/endpoints\";\r\nimport Toast from \"../../../../components/Toast\";\r\nimport { useSelector } from \"react-redux\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport LayoutToggler from \"../../../../components/LayoutToggler\";\r\nconst Container = () => {\r\n  const {\r\n    heading,\r\n    box,\r\n    favContainer,\r\n    loading,\r\n    pagination,\r\n    layout,\r\n  } = useStyles();\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const {\r\n    loadAllData,\r\n    setOpen,\r\n    open,\r\n    responseMessage,\r\n    removeData,\r\n    data,\r\n    isLoading,\r\n  } = useApi();\r\n\r\n  const handleClose = (): void => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleFavs = (id: string) => {\r\n    removeData(removeFavs, id);\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadAllData(getFavs, currentPage);\r\n  }, [currentPage]);\r\n\r\n  const layoutType = useSelector(\r\n    (state: any) => state.persistedReducer.layout.layoutType\r\n  );\r\n\r\n  const handlePageChange = (e: any) => {\r\n    setCurrentPage(e.target.innerText);\r\n  };\r\n\r\n  let isFavs = true\r\n\r\n  return (\r\n    <Grid container>\r\n      <Grid className={layoutType === \"list\" ? box : layout} item xs={12}>\r\n        <section className={heading}>\r\n          <Hidden mdUp>\r\n            <SideBar Title={Title} sidebar={paths} />\r\n          </Hidden>\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h3\">{fav}</Typography>\r\n          </Grid>\r\n        </section>\r\n        {data.length === 0 || isLoading ? (\r\n          <h2 className={loading}>Loading....</h2>\r\n        ) : (\r\n          <Grid className={favContainer} item xs={12}>\r\n            <Grid item xs={12}>\r\n              <Typography style={{ textAlign: \"center\" }} variant=\"h2\">\r\n                {favTitle}\r\n              </Typography>\r\n              <Grid style={{ marginTop: \"30px\" }} item xs={12}>\r\n                <LayoutToggler />\r\n                <CarListing\r\n                  data={data}\r\n                  layoutType={layoutType}\r\n                  handleFavs={handleFavs}\r\n                  isFavs={isFavs}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n            <Toast\r\n              open={open}\r\n              type={responseMessage.status}\r\n              message={responseMessage.message}\r\n              onClose={handleClose}\r\n            />\r\n          </Grid>\r\n        )}\r\n      </Grid>\r\n      <Grid className={pagination} item xs={12}>\r\n        <Pagination\r\n          count={10}\r\n          hidePrevButton\r\n          hideNextButton\r\n          onChange={(e) => handlePageChange(e)}\r\n        />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Container;\r\n","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\Profile\\Orders\\History.tsx",["639","640","641"],"import { Grid, Typography, Hidden } from \"@material-ui/core\";\r\nimport { useStyles } from \"./useStyles\";\r\nimport {\r\n  paths,\r\n  Title,\r\n  history,\r\n  purchaseTitle,\r\n  purchasedOn,\r\n  soldOn,\r\n  sellingTitle,\r\n} from \"../../../Utils/sidebarText\";\r\nimport SideBar from \"../ProfileSidebar/Sidebar\";\r\nimport ListingCard from \"../../../../../components/ListingCard\";\r\nimport { useState } from \"react\";\r\nimport {Colors} from \"../../../Utils/color.constants\"\r\nconst UserHistory = () => {\r\n  const {\r\n    heading,\r\n    box,\r\n    helpContainer,\r\n    subContainer,\r\n    button,\r\n    buttonContainer,\r\n  } = useStyles();\r\n  const {berryRed,royalBlue} = Colors\r\n  const [title, setTitle] = useState(\"\");\r\n  const [isActive, setIsActive] = useState(false);\r\n  const [notActive, setNotActive] = useState(false);\r\n  let purchase = purchaseTitle;\r\n  let selling = sellingTitle;\r\n  return (\r\n    <Grid container>\r\n      <Grid className={box} item lg={12} md={10} xs={12}>\r\n        <section className={heading}>\r\n          <Hidden mdUp>\r\n            <SideBar Title={Title} sidebar={paths} />\r\n          </Hidden>\r\n            <Typography variant=\"h3\">{history}</Typography>\r\n        </section>\r\n        <Grid className={buttonContainer} item xs={12}>\r\n          <button\r\n            style={\r\n              isActive\r\n                ? { background: berryRed, transition: \"all .2s linear\" }\r\n                : { background: royalBlue, transition: \"all .2s linear\" }\r\n            }\r\n            className={button}\r\n            onClick={() => {\r\n              setTitle(purchase);\r\n              setIsActive(true);\r\n              setNotActive(false);\r\n            }}\r\n          >\r\n            {purchaseTitle}\r\n          </button>\r\n          <button\r\n            style={\r\n              notActive\r\n                ? { background: berryRed, transition: \"all .3s linear\" }\r\n                : { background: royalBlue, transition: \"all .3s linear\" }\r\n            }\r\n            className={button}\r\n            onClick={() => {\r\n              setTitle(selling);\r\n              setIsActive(false);\r\n              setNotActive(true);\r\n            }}\r\n          >\r\n            {sellingTitle}\r\n          </button>\r\n        </Grid>\r\n        <Grid className={helpContainer} item xs={12}>\r\n          <section className={subContainer}>\r\n            <Grid\r\n              style={{ marginTop: \"10px\", textAlign: \"center\" }}\r\n              item\r\n              xs={12}\r\n            >\r\n              <Typography variant=\"h2\"> {title ? title : selling} </Typography>\r\n            </Grid>\r\n            {title === purchase ? (\r\n              <>\r\n                <Grid style={{ marginTop: \"25px\" }} item xs={12}>\r\n                  {/* <ListingCard\r\n                    data={CarsListingData}\r\n                    layoutType=\"list\"\r\n                    span={purchasedOn}\r\n                  /> */}\r\n                </Grid>\r\n              </>\r\n            ) : (\r\n              <>\r\n                <Grid style={{ marginTop: \"25px\" }} item xs={12}>\r\n                  {/* <ListingCard\r\n                    data={CarsListingData}\r\n                    layoutType=\"list\"\r\n                    span={soldOn}\r\n                  /> */}\r\n                </Grid>\r\n              </>\r\n            )}\r\n          </section>\r\n        </Grid>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default UserHistory;\r\n","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\Profile\\Ads\\Ads.tsx",["642"],"import { Grid, Typography, Hidden } from \"@material-ui/core\";\r\nimport { useStyles } from \"../useStyles\";\r\nimport { useEffect, useState } from \"react\";\r\nimport CarListing from \"../../../../../components/ListingCard\";\r\nimport { adsTitle, paths, Title, ads } from \"../../../Utils/sidebarText\";\r\nimport SideBar from \"../ProfileSidebar/Sidebar\";\r\nimport useApi from \"../../../../../Utils/hooks/useApi\";\r\nimport { getAds } from \"../../../../../Utils/hooks/endpoints\";\r\nimport { useSelector } from \"react-redux\";\r\nimport LayoutToggler from \"../../../../../components/LayoutToggler\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nconst Container = () => {\r\n  const {\r\n    heading,\r\n    box,\r\n    favContainer,\r\n    loading,\r\n    pagination,\r\n    layout,\r\n  } = useStyles();\r\n  const { loadAllData, isLoading, data } = useApi();\r\n\r\n  const layoutType = useSelector(\r\n    (state: any) => state.persistedReducer.layout.layoutType\r\n  );\r\n\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n\r\n  useEffect(() => {\r\n    loadAllData(getAds, currentPage);\r\n  }, [currentPage]);\r\n\r\n  const handlePageChange = (e: any) => {\r\n    setCurrentPage(e.target.innerText);\r\n  };\r\n\r\n  let isFavs = false;\r\n\r\n  return (\r\n    <Grid container>\r\n      <Grid className={layoutType === \"list\" ? box : layout} item xs={12}>\r\n        <section className={heading}>\r\n          <Hidden mdUp>\r\n            <SideBar Title={Title} sidebar={paths} />\r\n          </Hidden>\r\n          <Typography variant=\"h3\">{ads}</Typography>\r\n        </section>\r\n        {data.length === 0 || isLoading ? (\r\n          <h2 className={loading}>Loading....</h2>\r\n        ) : (\r\n          <Grid className={favContainer} item xs={12}>\r\n            <Grid item xs={12}>\r\n              <Typography style={{ textAlign: \"center\" }} variant=\"h2\">\r\n                {adsTitle}\r\n              </Typography>\r\n              <LayoutToggler />\r\n              <Grid style={{ marginTop: \"30px\" }} item xs={12}>\r\n                <CarListing\r\n                  data={data}\r\n                  layoutType={layoutType}\r\n                  isFavs={isFavs}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        )}\r\n      </Grid>\r\n      <Grid className={pagination} item xs={12}>\r\n        <Pagination\r\n          count={10}\r\n          hidePrevButton\r\n          hideNextButton\r\n          onChange={(e) => handlePageChange(e)}\r\n        />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Container;\r\n","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\Profile\\useStyles.ts",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\Profile\\Help\\useStyles.ts",["643","644","645"],"import { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Colors } from \"../../../Utils/color.constants\";\r\nimport createBreakpoints from \"@material-ui/core/styles/createBreakpoints\";\r\nconst breakpoints = createBreakpoints({});\r\nconst {red,white,navyBlue,blue,lightGreen} = Colors\r\n\r\nexport const useStyles = makeStyles((theme) => ({\r\n  root:{\r\n    justifyContent: \"center\",\r\n    display: \"flex\",\r\n    flexFlow: \"wrap\",\r\n    flexDirection: \"column\",\r\n    paddingLeft: \"70px\",\r\n    [breakpoints.down(\"md\")]: {\r\n      paddingLeft: \"0px\",\r\n    },\r\n  },\r\n \r\n  heading:{\r\n    background: navyBlue,\r\n    color: white,\r\n    padding: \"20px 10px 20px 10px\",\r\n    display: \"flex\",\r\n    justifyContent: \"space-between\",\r\n  },\r\n  box:{\r\n    marginLeft: \"20px\",\r\n    [breakpoints.down(\"sm\")]: {\r\n      marginLeft: \"0px\",\r\n    },\r\n    background: white,\r\n    paddingBottom: \"20px\"\r\n  },\r\n  helpContainer:{\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n    padding: \"30px\"\r\n  },\r\n  subContainer:{\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"start\",\r\n  }\r\n\r\n}));\r\n","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\Profile\\Orders\\useStyles.ts",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\Profile\\useHooks.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\Profile\\DatePicker.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\Profile\\ProfileSidebar\\Sidebar.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\Profile\\RegexInputs.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\Profile\\ProfileSidebar\\sidebarStyles.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\Profile\\UploadProfile\\ProfileUpload.tsx",["646"],"import {useRef} from 'react'\r\nimport {Upload} from \"../types\"\r\n\r\nconst ProfileUpload = ({setImg,profile} : Upload) => {\r\n\r\n    const uploadedImage = useRef<any | FileReader>(null);\r\n    const imageUploader = useRef<any | FileReader>(null);\r\n    const handleImageUpload = (e : any) => {\r\n      const [file] = e.target.files;\r\n      if (!file){\r\n          return console.log(\"error\")\r\n      }else {\r\n        const reader = new FileReader();\r\n        const { current } = uploadedImage;\r\n        current.file = file;\r\n        reader.onload = e => {\r\n          current.src = e.target?.result;\r\n        };\r\n        reader.readAsDataURL(file);\r\n        setImg(file)\r\n      }\r\n    };\r\n\r\n    // console.log(\"Img\",img)\r\n  \r\n    return (\r\n      <>\r\n        <input\r\n          type=\"file\"\r\n          accept=\"image/*\"\r\n          onChange={handleImageUpload}\r\n          ref={imageUploader}\r\n          style={{\r\n            display: \"none\"\r\n          }}\r\n        />\r\n        <div\r\n          style={{\r\n            width: \"150px\",\r\n            height: \"150px\",\r\n            borderRadius: \"50px\",\r\n          }}\r\n          onClick={() => {\r\n            imageUploader.current.click()}}>\r\n        \r\n              <img\r\n            src={profile}\r\n            width=\"100%\"\r\n            ref={uploadedImage}\r\n            style={{\r\n              width: \"150px\",\r\n              height: \"150px\",\r\n              position: \"absolute\",\r\n              cursor: \"pointer\",\r\n              borderRadius: \"50%\",\r\n            }}\r\n          />\r\n        </div>\r\n      </>\r\n    );\r\n}\r\n\r\nexport default ProfileUpload\r\n","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Utils\\sidebarText.tsx",["647","648"],"import icon1 from \"../assets/Profile/icon1.png\"\r\nimport icon2 from \"../assets/Profile/icon2.png\"\r\nimport icon3 from \"../assets/Profile/icon3.png\"\r\nimport icon4 from \"../assets/Profile/icon4.png\"\r\nimport icon5 from \"../assets/Profile/icon5.png\"\r\nimport icon6 from \"../assets/Profile/icon6.png\"\r\nimport icon7 from \"../assets/Profile/icon7.png\"\r\nimport icon8 from \"../assets/Profile/icon8.png\"\r\nimport profileIcon from \"../assets/Profile/profile 1.png\"\r\nimport helpIcon from \"../assets/Profile/customer-service.png\"\r\n\r\nexport const Title = \"DashBoard\"\r\nexport const profileTitle = \"Profile\"\r\nexport const buttonText = \"Save\"\r\nexport const profile = profileIcon\r\nexport const cancelButtonText = \"Cancel\"\r\n\r\nexport const required = \"This field is required\";\r\nexport const emailText = \"Invalid email\";\r\nexport const userText = \"'Name can only use letters,numbers, minimum length is 8 characters'\";\r\nexport const newPass = \"Password must have at least 8 characters\"\r\nexport const confirmPass = \"The passwords do not match\"\r\nexport const email =   /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,})+$/\r\nexport const numberReg = /^[0-9\\b]+$/\r\n\r\nexport const paths = [{\r\n    title: \"Profile\",\r\n    path: \"/dashboard/profile\",\r\n    icon: icon1\r\n},\r\n{\r\n    title: \"Orders\",\r\n    path: \"/dashboard/orders\",\r\n    icon: icon2\r\n},\r\n{\r\n    title: \"Comparison\",\r\n    path: \"/\",\r\n    icon: icon3\r\n},\r\n{\r\n    title: \"Shortlist Items\",\r\n    path: \"/dashboard/favorites\",\r\n    icon: icon4\r\n},\r\n{\r\n    title: \"Your Ads\",\r\n    path: \"/dashboard/ads\",\r\n    icon: icon5\r\n},\r\n{\r\n    title: \"Booked Items\",\r\n    path: \"/\",\r\n    icon: icon6\r\n},\r\n{\r\n    title: \"Buyer Request\",\r\n    path: \"/\",\r\n    icon: icon7\r\n},\r\n{\r\n    title: \"Help\",\r\n    path: \"/dashboard/help\",\r\n    icon: icon8\r\n}\r\n]\r\n\r\n\r\n\r\n\r\nexport const currencies = [\r\n    {\r\n      value: 'USD',\r\n      label: '$',\r\n    },\r\n    {\r\n      value: 'EUR',\r\n      label: '€',\r\n    },\r\n    {\r\n      value: 'BTC',\r\n      label: '฿',\r\n    },\r\n    {\r\n      value: 'JPY',\r\n      label: '¥',\r\n    },\r\n  ];\r\n\r\n\r\n\r\n  export const gender = [\r\n    {\r\n      value: \"male\",\r\n      label: 'male',\r\n    },\r\n    {\r\n      value: 'female',\r\n      label: 'female',\r\n    },\r\n    {\r\n        value: 'other',\r\n        label: 'other',\r\n      },\r\n  ];\r\n\r\n\r\n  \r\n  export const city = [\r\n    {\r\n      value: \"Lahore\",\r\n      label: 'Lahore',\r\n    },\r\n    {\r\n      value: 'Islamabad',\r\n      label: 'Islamabad',\r\n    },\r\n  ];\r\n\r\n    \r\n  export const country = [\r\n    {\r\n      value: \"Pakistan\",\r\n      label: 'Pakistan',\r\n    },\r\n    {\r\n      value: 'Netherlands',\r\n      label: 'Netherlands',\r\n    },\r\n  ];\r\n\r\n\r\n// favs \r\n\r\nexport const fav = \"Favorites\"\r\nexport const favTitle = \"Your Favorites\"\r\n\r\n\r\n// favs \r\n\r\nexport const ads = \"Ads\"\r\nexport const adsTitle = \"Your Ads\"\r\n\r\n\r\n\r\n// history\r\n\r\nexport const history = \"Orders\"\r\nexport const purchaseTitle = \"Purchasing History\"\r\nexport const purchasedOn = \"Purchased on:\"\r\nexport const soldOn = \"Sold on:\"\r\nexport const sellingTitle = \"Selling History\"\r\n\r\n\r\n\r\n// help\r\n\r\n\r\nexport const help = \"Help\"\r\nexport const helpTitle = \"How can we help you?\"\r\nexport const icon = helpIcon\r\nexport const gmail = \"wwww.example@gmail.com\"\r\nexport const number = \"555-555-1212\"\r\nexport const mailTo = \"mailTo:wwww.example@gmail.com\"\r\nexport const dialTo = \"tel:+1-555-555-1212\"\r\nexport const emailUs = \"Email us at:\"\r\nexport const callUs = \"Call us at:\"\r\n","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\Profile\\ChangePassword\\index.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\Table\\Container.tsx",["649"],"import Table from \"./Table\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport {\r\n  Title,\r\n  moreBtn,\r\n  lessBtn,\r\n  subTitle,\r\n  array,\r\n  collapsedArray,\r\n} from \"../../Utils/carComparision\";\r\nimport useApi from \"../../../../Utils/hooks/useApi\";\r\nimport { compareCars } from \"../../../../Utils/hooks/endpoints\";\r\nimport { useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\ninterface RouterProps {\r\n  _fId: string;\r\n  _sId: string;\r\n}\r\nconst Container = () => {\r\n  const { loadAllData, data, isLoading } = useApi();\r\n  const { _fId, _sId } = useParams<RouterProps>();\r\n\r\n  useEffect(() => {\r\n    loadAllData(compareCars, `_id=${_fId}&_id=${_sId}`);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {isLoading || data.length === 0 ? (\r\n        <h1 style={{ textAlign: \"center\" }}>Loading..</h1>\r\n      ) : (\r\n        <Grid style={{ paddingTop: \"100px\" }} item xs={12}>\r\n          <Grid item xs={12}>\r\n            <Table\r\n              items={data}\r\n              array={array}\r\n              Title={Title}\r\n              subTitle={subTitle}\r\n              moreBtn={moreBtn}\r\n              lessBtn={lessBtn}\r\n              collapsedArray={collapsedArray}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Container;\r\n","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\Table\\Table.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\Table\\useStyles.ts",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\Table\\TableRows.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\Table\\CollapsedTable\\CollapsedTable.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\Table\\CollapsedTable\\CollapsedRows.tsx",["650"],"import {\r\n    TableRow,\r\n    TableCell,\r\n  } from \"@material-ui/core\";\r\nimport { ICarCard } from '../../../Utils/types'\r\nimport { useStyles } from \"../useStyles\";\r\n\r\nconst TableRows = ({items,array} : any) => {\r\n    const {cell } = useStyles();\r\n    return (\r\n        <>\r\n             {items && items.length !== 0 && array &&\r\n                    <>\r\n                    <TableRow>\r\n                      <TableCell className={cell}>{array[0]}</TableCell>\r\n                      <TableCell className={cell}>{items[0].model}</TableCell>\r\n                      <TableCell className={cell}>{items[1].model}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                      <TableCell className={cell}>{array[1]}</TableCell>\r\n                      <TableCell className={cell}>{items[0].make}</TableCell>\r\n                      <TableCell className={cell}>{items[1].make}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                      <TableCell className={cell}>{array[2]}</TableCell>\r\n                      <TableCell className={cell}>{items[0].milage}</TableCell>\r\n                      <TableCell className={cell}>{items[1].milage}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                      <TableCell className={cell}>{array[3]}</TableCell>\r\n                      <TableCell className={cell}>{items[0].transmission}</TableCell>\r\n                      <TableCell className={cell}>{items[1].transmission}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                      <TableCell className={cell}>{array[4]}</TableCell>\r\n                      <TableCell className={cell}>{items[0].transmission}</TableCell>\r\n                      <TableCell className={cell}>{items[1].transmission}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                      <TableCell className={cell}>{array[5]}</TableCell>\r\n                      <TableCell className={cell}>{items[0].transmission}</TableCell>\r\n                      <TableCell className={cell}>{items[1].transmission}</TableCell>\r\n                    </TableRow>\r\n                    </>\r\n                    \r\n              } \r\n        </>\r\n    )\r\n}\r\n\r\nexport default TableRows\r\n","C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\HomeSections\\Category\\CategorySection.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\HomeSections\\CarComparison\\ComparisonContext.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\HomeSections\\Category\\useStyles.tsx",[],"C:\\Users\\Amira-Dev\\Desktop\\React\\SolutionsContext\\Section\\TDW-Framework\\src\\layout\\Sections\\Sections\\HomeSections\\CarComparison\\useStyles.tsx",[],{"ruleId":"651","replacedBy":"652"},{"ruleId":"653","replacedBy":"654"},{"ruleId":"655","severity":1,"message":"656","line":17,"column":8,"nodeType":"657","messageId":"658","endLine":17,"endColumn":19},{"ruleId":"655","severity":1,"message":"659","line":23,"column":3,"nodeType":"657","messageId":"658","endLine":23,"endColumn":18},{"ruleId":"655","severity":1,"message":"660","line":59,"column":9,"nodeType":"657","messageId":"658","endLine":59,"endColumn":19},{"ruleId":"661","severity":1,"message":"662","line":39,"column":6,"nodeType":"663","endLine":39,"endColumn":8,"suggestions":"664"},{"ruleId":"655","severity":1,"message":"665","line":2,"column":10,"nodeType":"657","messageId":"658","endLine":2,"endColumn":20},{"ruleId":"655","severity":1,"message":"666","line":2,"column":22,"nodeType":"657","messageId":"658","endLine":2,"endColumn":30},{"ruleId":"655","severity":1,"message":"667","line":12,"column":27,"nodeType":"657","messageId":"658","endLine":12,"endColumn":45},{"ruleId":"655","severity":1,"message":"667","line":13,"column":27,"nodeType":"657","messageId":"658","endLine":13,"endColumn":45},{"ruleId":"661","severity":1,"message":"668","line":24,"column":6,"nodeType":"663","endLine":24,"endColumn":8,"suggestions":"669"},{"ruleId":"670","severity":1,"message":"671","line":90,"column":5,"nodeType":"672","messageId":"673","endLine":92,"endColumn":6},{"ruleId":"670","severity":1,"message":"671","line":93,"column":5,"nodeType":"672","messageId":"673","endLine":95,"endColumn":6},{"ruleId":"670","severity":1,"message":"671","line":96,"column":5,"nodeType":"672","messageId":"673","endLine":98,"endColumn":6},{"ruleId":"670","severity":1,"message":"671","line":99,"column":5,"nodeType":"672","messageId":"673","endLine":101,"endColumn":6},{"ruleId":"670","severity":1,"message":"671","line":102,"column":5,"nodeType":"672","messageId":"673","endLine":104,"endColumn":6},{"ruleId":"670","severity":1,"message":"671","line":105,"column":5,"nodeType":"672","messageId":"673","endLine":107,"endColumn":6},{"ruleId":"674","severity":1,"message":"675","line":31,"column":9,"nodeType":"676","messageId":"677","endLine":31,"endColumn":11},{"ruleId":"655","severity":1,"message":"678","line":28,"column":5,"nodeType":"657","messageId":"658","endLine":28,"endColumn":18},{"ruleId":"655","severity":1,"message":"679","line":3,"column":78,"nodeType":"657","messageId":"658","endLine":3,"endColumn":81},{"ruleId":"655","severity":1,"message":"680","line":29,"column":9,"nodeType":"657","messageId":"658","endLine":29,"endColumn":16},{"ruleId":"655","severity":1,"message":"681","line":9,"column":9,"nodeType":"657","messageId":"658","endLine":9,"endColumn":13},{"ruleId":"655","severity":1,"message":"682","line":20,"column":3,"nodeType":"657","messageId":"658","endLine":20,"endColumn":7},{"ruleId":"655","severity":1,"message":"683","line":36,"column":5,"nodeType":"657","messageId":"658","endLine":36,"endColumn":13},{"ruleId":"655","severity":1,"message":"684","line":38,"column":18,"nodeType":"657","messageId":"658","endLine":38,"endColumn":24},{"ruleId":"661","severity":1,"message":"668","line":43,"column":6,"nodeType":"663","endLine":43,"endColumn":19,"suggestions":"685"},{"ruleId":"655","severity":1,"message":"686","line":8,"column":3,"nodeType":"657","messageId":"658","endLine":8,"endColumn":14},{"ruleId":"655","severity":1,"message":"687","line":9,"column":3,"nodeType":"657","messageId":"658","endLine":9,"endColumn":9},{"ruleId":"655","severity":1,"message":"656","line":13,"column":8,"nodeType":"657","messageId":"658","endLine":13,"endColumn":19},{"ruleId":"661","severity":1,"message":"668","line":31,"column":6,"nodeType":"663","endLine":31,"endColumn":19,"suggestions":"688"},{"ruleId":"655","severity":1,"message":"679","line":5,"column":8,"nodeType":"657","messageId":"658","endLine":5,"endColumn":11},{"ruleId":"655","severity":1,"message":"689","line":5,"column":27,"nodeType":"657","messageId":"658","endLine":5,"endColumn":31},{"ruleId":"655","severity":1,"message":"690","line":5,"column":32,"nodeType":"657","messageId":"658","endLine":5,"endColumn":42},{"ruleId":"691","severity":1,"message":"692","line":46,"column":15,"nodeType":"693","endLine":57,"endColumn":13},{"ruleId":"694","severity":1,"message":"695","line":23,"column":31,"nodeType":"696","messageId":"697","endLine":23,"endColumn":32,"suggestions":"698"},{"ruleId":"694","severity":1,"message":"695","line":23,"column":47,"nodeType":"696","messageId":"697","endLine":23,"endColumn":48,"suggestions":"699"},{"ruleId":"661","severity":1,"message":"700","line":26,"column":6,"nodeType":"663","endLine":26,"endColumn":8,"suggestions":"701"},{"ruleId":"655","severity":1,"message":"702","line":5,"column":10,"nodeType":"657","messageId":"658","endLine":5,"endColumn":18},"no-native-reassign",["703"],"no-negated-in-lhs",["704"],"@typescript-eslint/no-unused-vars","'ListingCard' is defined but never used.","Identifier","unusedVar","'CarsListingData' is defined but never used.","'layoutType' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'id' and 'loadSingleData'. Either include them or remove the dependency array.","ArrayExpression",["705"],"'fieldNames' is defined but never used.","'messages' is defined but never used.","'setResponseMessage' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'loadAllData'. Either include it or remove the dependency array.",["706"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","'featuredBadge' is assigned a value but never used.","'red' is assigned a value but never used.","'history' is assigned a value but never used.","'city' is assigned a value but never used.","'area' is defined but never used.","'register' is assigned a value but never used.","'errors' is assigned a value but never used.",["707"],"'purchasedOn' is defined but never used.","'soldOn' is defined but never used.",["708"],"'blue' is assigned a value but never used.","'lightGreen' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["709","710"],["711","712"],"React Hook useEffect has missing dependencies: '_fId', '_sId', and 'loadAllData'. Either include them or remove the dependency array.",["713"],"'ICarCard' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"714","fix":"715"},{"desc":"716","fix":"717"},{"desc":"718","fix":"719"},{"desc":"718","fix":"720"},{"messageId":"721","fix":"722","desc":"723"},{"messageId":"724","fix":"725","desc":"726"},{"messageId":"721","fix":"727","desc":"723"},{"messageId":"724","fix":"728","desc":"726"},{"desc":"729","fix":"730"},"Update the dependencies array to be: [id, loadSingleData]",{"range":"731","text":"732"},"Update the dependencies array to be: [loadAllData]",{"range":"733","text":"734"},"Update the dependencies array to be: [currentPage, loadAllData]",{"range":"735","text":"736"},{"range":"737","text":"736"},"removeEscape",{"range":"738","text":"739"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"740","text":"741"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"742","text":"739"},{"range":"743","text":"741"},"Update the dependencies array to be: [_fId, _sId, loadAllData]",{"range":"744","text":"745"},[1165,1167],"[id, loadSingleData]",[917,919],"[loadAllData]",[1230,1243],"[currentPage, loadAllData]",[1059,1072],[1047,1048],"",[1047,1047],"\\",[1063,1064],[1063,1063],[683,685],"[_fId, _sId, loadAllData]"]